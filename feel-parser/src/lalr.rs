//! # Parsing tables
//!
//! Parsing tables extracted from files generated by `Bison` for `C` language.
//! This file was generated by dedicated tool, do not modify it manually.

use dsntk_common::Result;

/// Types of tokens returned by lexer.
#[derive(Clone)]
pub enum TokenType {
  YyEmpty = -2,
  YyEof = 0,
  YyError = 256,
  YyUndef = 257,
  StartExpression = 258,
  StartBoxedExpression = 259,
  StartContext = 260,
  StartTextualExpression = 261,
  StartTextualExpressions = 262,
  StartUnaryTests = 263,
  StartSimpleExpression = 264,
  StartSimpleExpressions = 265,
  StartSimpleValue = 266,
  StartRangeLiteral = 267,
  At = 268,
  Not = 269,
  Colon = 270,
  Comma = 271,
  Every = 272,
  For = 273,
  LeftBrace = 274,
  Null = 275,
  RightArrow = 276,
  Of = 277,
  List = 278,
  Range = 279,
  Context = 280,
  Then = 281,
  Function = 282,
  External = 283,
  If = 284,
  RightBrace = 285,
  Return = 286,
  Some = 287,
  Numeric = 288,
  String = 289,
  Boolean = 290,
  Satisfies = 291,
  Else = 292,
  Or = 293,
  And = 294,
  Eq = 295,
  Nq = 296,
  Lt = 297,
  Le = 298,
  Gt = 299,
  Ge = 300,
  Between = 301,
  BetweenAnd = 302,
  In = 303,
  Minus = 304,
  Plus = 305,
  Mul = 306,
  Div = 307,
  Exp = 308,
  Instance = 310,
  Name = 311,
  NameDateTime = 312,
  BuiltInTypeName = 313,
  LeftParen = 314,
  RightParen = 315,
  LeftBracket = 316,
  RightBracket = 317,
  Ellipsis = 318,
  Dot = 319,
}

/// Kinds of symbols recognized by parser.
#[allow(clippy::enum_variant_names)]
pub enum SymbolKind {
  YyEmpty = -2,
  YyEof = 0,
  YyError = 1,
  YyUndef = 2,
  YyAccept = 65,
}

///
pub const YY_PACT_N_INF: i16 = -244;

///
pub const YY_TABLE_N_INF: i16 = -118;

///
pub const YY_FINAL: usize = 69;

///
pub const YY_LAST: i16 = 1048;

///
pub const YY_N_TOKENS: usize = 65;

/// `YY_TRANSLATE[TOKEN-NUM]` - symbol number corresponding to TOKEN-NUM as returned by lexer.
pub const YY_TRANSLATE: [i8; 320] = [
  0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
];

/// `YY_PACT[STATE-NUM]` - index in YY_TABLE of the portion describing STATE-NUM.
pub const YY_PACT: [i16; 325] = [
  1036, 387, 110, 33, 387, 387, -244, 434, 434, 11, 57, 27, 37, -244, -244, -244, -244, 14, 387, -244, -244, -244, -244, 387, 387, 387, 387, 387, -244, 39, 387, 481, 387, 857,
  -244, -244, -244, -244, 387, -244, -244, -244, -244, -244, 481, -244, -244, 857, 83, 22, -244, 243, 387, 16, 884, -244, -244, 31, -244, 94, -244, 47, -244, -244, 8, 8, 8, -244,
  8, -244, -244, -244, -244, 29, -244, 694, -244, 77, -244, -244, -244, -244, 136, -244, 749, 54, 695, 553, 82, -244, 95, 387, 387, 387, 387, 387, 387, 387, 387, -244, 528, 387,
  387, 387, 387, 387, 124, 290, 387, 104, -244, -26, 553, 387, 102, 387, 646, -244, -244, 135, 108, 387, 387, 387, 387, 387, 434, -244, -244, 113, 112, 114, 129, -244, 78, 137,
  151, 145, 162, 189, 152, -244, -244, -244, -244, 24, 194, 53, 387, 174, 290, -244, -244, 387, -244, -244, -244, -244, 910, 935, 960, 960, 960, 960, 960, 960, 387, 387, 179, 974,
  974, 125, 125, 136, -244, 196, -244, 584, -244, -244, 2, -244, 776, -244, -244, -244, -244, -244, 387, 387, -244, 5, 23, 89, 115, 143, -244, -244, -244, -244, -244, -244, -244,
  -244, 387, -244, -244, 387, -244, -244, 52, -244, -244, 387, 198, -244, 340, -244, 722, 387, -244, 553, 803, 615, -244, 158, 387, 387, -244, -244, 163, -244, -244, -244, 160,
  -244, 290, 857, -244, 173, 857, -244, 175, 24, 857, -244, 387, 857, -244, 21, 387, 857, -244, 387, 387, 180, 182, 191, 195, -244, -244, -244, 857, 584, 196, 2, -244, -244, 387,
  387, -244, 158, 857, 183, -244, -244, 857, 179, 176, -244, -244, 185, 200, -244, -244, 857, 830, -244, -244, -244, -244, 158, 158, 227, -244, 9, -244, 225, 158, 387, 21, 203,
  204, -244, 185, -244, -244, -244, 17, 857, -244, -244, -244, 158, 9, 158, -244, -244, -244, -244, -244, -244, 158, 17, -244,
];

/// `YY_DEF_ACT[STATE-NUM]` - default reduction number in state STATE-NUM.
/// Performed when YY_TABLE does not specify something else to do.
/// Zero means the default is an error.
pub const YY_DEF_ACT: [u8; 325] = [
  0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 23, 18, 92, 85, 0, 0, 21, 86, 87, 88, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 2, 13, 14, 49, 73, 0, 48, 84, 17, 15, 16, 0, 3, 4, 0, 14, 14, 6, 0,
  0, 50, 0, 9, 66, 84, 82, 68, 10, 117, 11, 83, 0, 0, 0, 12, 0, 1, 89, 147, 140, 0, 150, 0, 147, 81, 69, 70, 71, 72, 42, 90, 81, 0, 102, 81, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 54, 58, 8, 56, 42, 0, 0, 0, 0, 0, 0, 0, 170, 171, 0, 0, 0, 0, 163, 0, 0, 146, 0, 0, 139, 0, 94, 100, 99, 93, 0, 0, 0, 0, 0, 0, 51,
  75, 0, 104, 103, 77, 76, 27, 28, 29, 30, 31, 32, 33, 34, 0, 0, 36, 38, 37, 39, 40, 41, 43, 50, 106, 0, 47, 107, 0, 108, 0, 45, 78, 79, 80, 52, 0, 0, 116, 38, 37, 39, 40, 41, 67,
  172, 164, 166, 165, 167, 168, 169, 0, 147, 148, 0, 140, 141, 0, 97, 95, 0, 160, 152, 0, 153, 0, 0, 91, 0, 0, 81, 35, 0, 0, 0, 114, 113, 0, 111, 109, 46, 0, 57, 0, 24, 145, 0,
  19, 138, 0, 0, 96, 158, 0, 162, 151, 0, 0, 22, 105, 0, 0, 0, 0, 0, 0, 118, 119, 44, 110, 0, 0, 0, 55, 173, 0, 0, 98, 0, 161, 0, 155, 154, 20, 26, 0, 120, 122, 0, 133, 115, 112,
  149, 143, 142, 159, 156, 59, 0, 0, 0, 124, 0, 132, 0, 0, 0, 0, 0, 0, 128, 0, 130, 127, 125, 0, 144, 157, 121, 123, 0, 0, 0, 136, 135, 134, 129, 131, 126, 0, 0, 137,
];

/// `YY_P_GOTO[NTERM-NUM]`
pub const YY_P_GOTO: [i16; 77] = [
  -244, -244, -244, -1, 248, 15, -244, -244, -244, -244, -244, 138, -244, -177, -244, 247, 132, -244, -244, -244, -244, 131, 246, -244, 1, -244, 256, -244, -244, 55, 26, -244,
  -244, -244, 43, -148, -244, 36, 18, -244, 10, 6, -243, -244, -244, -244, -244, -33, -244, -40, -244, -244, -44, -244, 72, -244, -244, -244, -244, -75, -244, -244, -244, -244,
  -244, -244, -244, -19, -244, 20, -244, -244, -244, -244, -244, 68, -244,
];

/// `YY_DEF_GOTO[NTERM-NUM]`
pub const YY_DEF_GOTO: [i16; 77] = [
  0, 11, 51, 77, 34, 35, 72, 76, 71, 166, 225, 50, 117, 118, 224, 59, 60, 36, 37, 38, 110, 85, 56, 39, 40, 150, 41, 73, 144, 145, 212, 146, 42, 89, 155, 178, 179, 180, 232, 181,
  229, 260, 261, 291, 292, 315, 294, 295, 313, 306, 297, 298, 318, 322, 138, 139, 140, 242, 287, 135, 136, 137, 239, 43, 147, 216, 249, 275, 300, 217, 271, 248, 67, 68, 133, 130,
  236,
];

/// `YY_TABLE[YY_PACT[STATE-NUM]]` - what to do in state STATE-NUM.
/// If positive, shift that token.
/// If negative, reduce the rule whose number is the opposite.
/// If `YY_TABLE_N_INF`, syntax error.
pub const YY_TABLE: [i16; 1049] = [
  33, 149, 220, 47, 47, -61, 54, 54, 57, 57, 63, 234, 235, 58, 58, 58, -117, 75, 230, 48, 49, -61, -53, -60, 12, 304, 82, 69, 288, 84, 87, -83, -117, 316, 184, 185, 186, 273, 113,
  -60, 210, 127, 128, 112, 20, 21, 22, -83, 301, 302, 116, 119, 15, 305, 211, 308, 103, 104, 105, 141, 106, 317, 231, 142, 107, 129, 108, 61, 29, 109, 319, 70, 321, 74, 103, 104,
  105, 278, 106, 323, 120, 274, 107, -5, 108, 143, 142, 109, 267, -62, 158, 159, 160, 161, 162, 163, 164, 165, 83, 168, 169, 170, 171, 172, 173, -62, 177, 182, 143, 214, 126, 120,
  47, 215, 82, -63, 64, 152, 65, 66, 191, 192, 193, 194, 195, 54, 190, 57, 49, 15, 238, -63, 58, 131, 132, -65, 134, 17, 201, 202, 203, 109, 105, -64, 106, 156, 174, 218, 107,
  177, 108, -65, 221, 109, 78, 79, 80, 81, 157, -64, 183, 188, 88, 90, 61, 222, 223, 205, 105, 111, 106, 44, 197, 204, 107, 198, 108, 199, 105, 109, 106, 255, 256, 257, 107, 258,
  108, 116, 116, 109, 106, 106, 200, 207, 107, 107, 108, 108, 106, 109, 109, 206, 107, 237, 108, 208, 240, 109, 209, 213, 219, 226, 244, 245, 61, 247, 259, 90, 251, 264, 266, 268,
  279, 269, 280, 262, 263, 100, 101, 102, 103, 104, 105, 281, 106, 177, 290, 282, 107, 214, 108, 293, 303, 109, 296, 272, 307, 311, 312, 276, 45, 187, 277, 116, 55, 62, 12, 114,
  196, 46, 13, 14, 15, 16, 252, 243, 265, 285, 286, 270, 17, 314, 18, 283, 320, 19, 20, 21, 22, 324, 241, 310, 0, 284, 0, 23, 24, 25, 26, 0, 0, 0, 115, 289, 0, 0, 0, 0, 309, 28,
  29, 0, 30, 12, 31, 32, 0, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 0, 0, 23, 24, 25, 26, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 175, 29, 0, 30,
  176, 31, 32, 12, 0, 0, 0, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 17, 246, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 0, 0, 23, 24, 25, 26, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 28, 29, 0, 30,
  12, 31, 32, 0, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 0, 0, 23, 24, 25, 26, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 28, 29, 0, 30, 12, 31, 32, 0,
  13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 0, 0, 23, 24, 25, 26, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 53, 29, 0, 30, 12, 31, 32, 0, 13, 14, 15, 16,
  0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 0, 0, 23, 24, 25, 26, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 28, 29, 0, 30, 12, 31, 86, 0, 13, 14, 15, 16, 0, 0, 0, 0, 0,
  0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 0, 153, 23, 24, 25, 26, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 28, 29, 0, 167, 0, 31, 32, 91, 92, 93, 94, 95, 96, 97, 98, 99, 227, 100,
  101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 0, 108, 154, 0, 109, 0, 0, 0, 0, 91, 92, 93, 94, 95, 96, 97, 98, 99, 254, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 228,
  108, 0, 0, 109, 0, 0, 0, 0, 91, 92, 93, 94, 95, 96, 97, 98, 99, 189, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 151, 108, 0, 0, 109, 0, 0, 0, 0, 91, 92, 93, 94, 95, 96,
  97, 98, 99, 0, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 0, 108, 12, 0, 109, 0, 13, 14, 15, 16, 0, 0, 0, 0, 148, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 91, 92, 93, 94,
  95, 96, 97, 98, 99, 0, 100, 101, 102, 103, 104, 105, 0, 106, 0, 28, 29, 107, 0, 108, 0, 0, 109, 250, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0, 100, 101, 102, 103, 104, 105, 0, 106,
  0, 0, 0, 107, 0, 108, 0, 0, 109, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 151, 108, 0, 0, 109, 91, 92, 93, 94, 95, 96, 97, 98,
  99, 0, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 0, 108, 233, 0, 109, 91, 92, 93, 94, 95, 96, 97, 98, 99, 253, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 0,
  108, 0, 0, 109, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 0, 108, 0, 299, 109, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0, 100, 101,
  102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 0, 108, 0, 0, 109, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0, 100, 121, 122, 123, 124, 125, 0, 106, 0, 0, 0, 107, 0, 108, 0, 0, 109, 92,
  93, 94, 95, 96, 97, 98, 99, 0, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 0, 108, 0, 0, 109, 93, 94, 95, 96, 97, 98, 99, 0, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0,
  0, 107, 0, 108, 0, 0, 109, -118, -118, -118, -118, -118, -118, 99, 0, 100, 101, 102, 103, 104, 105, 0, 106, 0, 0, 0, 107, 0, 108, 0, 0, 109, 103, 104, 105, 0, 106, 0, 0, 0, 107,
  0, 108, 0, 0, 109, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
];

/// ???
pub const YY_CHECK: [i16; 1049] = [
  1, 76, 150, 4, 5, 0, 7, 8, 7, 8, 9, 188, 189, 7, 8, 9, 0, 18, 16, 4, 5, 16, 0, 0, 13, 16, 27, 0, 271, 30, 31, 0, 16, 16, 60, 61, 62, 16, 16, 16, 16, 33, 34, 44, 33, 34, 35, 16,
  291, 292, 51, 52, 19, 44, 30, 298, 51, 52, 53, 30, 55, 44, 60, 34, 59, 57, 61, 56, 57, 64, 313, 34, 315, 59, 51, 52, 53, 254, 55, 322, 64, 60, 59, 0, 61, 56, 34, 64, 236, 0, 91,
  92, 93, 94, 95, 96, 97, 98, 59, 100, 101, 102, 103, 104, 105, 16, 107, 108, 56, 56, 16, 64, 113, 60, 115, 0, 59, 63, 61, 62, 121, 122, 123, 124, 125, 126, 120, 126, 113, 19,
  205, 16, 126, 65, 66, 0, 68, 27, 60, 61, 62, 64, 53, 0, 55, 63, 22, 148, 59, 150, 61, 16, 153, 64, 23, 24, 25, 26, 63, 16, 56, 59, 31, 32, 56, 166, 167, 16, 53, 38, 55, 61, 59,
  36, 59, 63, 61, 63, 53, 64, 55, 23, 24, 25, 59, 27, 61, 188, 189, 64, 55, 55, 63, 31, 59, 59, 61, 61, 55, 64, 64, 56, 59, 204, 61, 16, 207, 64, 56, 15, 36, 15, 213, 15, 56, 216,
  58, 86, 219, 56, 60, 48, 42, 48, 42, 226, 227, 48, 49, 50, 51, 52, 53, 42, 55, 236, 60, 42, 59, 56, 61, 56, 15, 64, 44, 246, 21, 44, 44, 250, 2, 113, 253, 254, 7, 9, 13, 14,
  126, 3, 17, 18, 19, 20, 221, 210, 230, 268, 269, 243, 27, 304, 29, 263, 314, 32, 33, 34, 35, 323, 208, 300, -1, 265, -1, 42, 43, 44, 45, -1, -1, -1, 49, 273, -1, -1, -1, -1,
  299, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1, -1, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1, 42, 43, 44, 45, -1, -1, -1, 49, -1, -1,
  -1, -1, -1, -1, 56, 57, -1, 59, 60, 61, 62, 13, -1, -1, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, 28, 29, -1, -1, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1, 42, 43, 44, 45,
  -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1, -1, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1, 42,
  43, 44, 45, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1, -1, 32, 33, 34, 35, -1, -1, -1, -1,
  -1, -1, 42, 43, 44, 45, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1, -1, 32, 33, 34, 35, -1,
  -1, -1, -1, -1, -1, 42, 43, 44, 45, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1, -1, 32, 33,
  34, 35, -1, -1, -1, -1, -1, 16, 42, 43, 44, 45, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, -1, 61, 62, 38, 39, 40, 41, 42, 43, 44, 45, 46, 16, 48, 49, 50, 51, 52,
  53, -1, 55, -1, -1, -1, 59, -1, 61, 62, -1, 64, -1, -1, -1, -1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 16, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, 60, 61, -1, -1, 64, -1,
  -1, -1, -1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 16, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, 60, 61, -1, -1, 64, -1, -1, -1, -1, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1,
  48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, 13, -1, 64, -1, 17, 18, 19, 20, -1, -1, -1, -1, 26, -1, 27, -1, 29, -1, -1, 32, 33, 34, 35, -1, 38, 39, 40, 41, 42, 43,
  44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, 56, 57, 59, -1, 61, -1, -1, 64, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59,
  -1, 61, -1, -1, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, 60, 61, -1, -1, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49,
  50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, 62, -1, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 38, 39,
  40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, 63, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1,
  -1, -1, 59, -1, 61, -1, -1, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 39, 40, 41, 42, 43, 44, 45, 46, -1,
  48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 40, 41,
  42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 3, 4, 5, 6, 7, 8, 9, 10, 11,
  12,
];

/// `YY_R1[YYN]` - symbol number of symbol that rule YYN derives.
pub const YY_R1: [u8; 174] = [
  0, 65, 66, 66, 66, 66, 66, 67, 66, 66, 66, 66, 66, 68, 68, 69, 69, 69, 71, 70, 70, 72, 70, 73, 70, 74, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 75,
  70, 70, 70, 70, 70, 70, 70, 70, 76, 76, 77, 77, 77, 78, 78, 79, 80, 80, 80, 80, 80, 80, 80, 81, 81, 82, 82, 82, 82, 82, 83, 84, 84, 84, 85, 85, 85, 86, 87, 87, 88, 88, 89, 89,
  89, 89, 90, 89, 92, 91, 93, 93, 94, 95, 95, 96, 96, 97, 98, 98, 99, 99, 100, 100, 100, 101, 102, 103, 103, 104, 105, 105, 106, 106, 107, 107, 108, 107, 109, 107, 107, 110, 107,
  111, 113, 112, 114, 114, 115, 116, 115, 117, 118, 117, 119, 119, 121, 122, 120, 123, 123, 124, 124, 126, 127, 125, 129, 128, 130, 131, 130, 132, 133, 132, 135, 134, 134, 136,
  136, 137, 138, 138, 138, 139, 139, 139, 140, 140, 141, 140,
];

/// `YY_R2[YYN]` - number of symbols on the right hand side of rule YYN.
pub const YY_R2: [i8; 174] = [
  0, 2, 2, 2, 2, 2, 2, 0, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 5, 6, 0, 5, 0, 5, 0, 6, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 2, 0, 5, 3, 4, 3, 1, 1, 1, 3, 3, 1, 1, 4, 1, 3, 1,
  4, 3, 3, 3, 3, 3, 2, 1, 3, 1, 2, 2, 2, 2, 1, 2, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 4, 0, 3, 1, 2, 3, 1, 3, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 2, 3, 1, 3, 2, 1, 3, 3, 1,
  1, 1, 0, 5, 0, 5, 3, 0, 6, 2, 0, 4, 1, 3, 1, 0, 3, 1, 0, 4, 3, 1, 0, 0, 5, 1, 3, 3, 1, 0, 0, 5, 0, 5, 1, 0, 3, 1, 0, 4, 0, 4, 1, 2, 1, 2, 3, 3, 3, 2, 2, 2, 1, 1, 0, 4,
];

///Trait for reduce action definitions.
pub trait ReduceActions {
  fn action_addition(&mut self) -> Result<()>;
  fn action_between(&mut self) -> Result<()>;
  fn action_between_begin(&mut self) -> Result<()>;
  fn action_built_in_type_name(&mut self) -> Result<()>;
  fn action_comparison_eq(&mut self) -> Result<()>;
  fn action_comparison_ge(&mut self) -> Result<()>;
  fn action_comparison_gt(&mut self) -> Result<()>;
  fn action_comparison_in(&mut self) -> Result<()>;
  fn action_comparison_le(&mut self) -> Result<()>;
  fn action_comparison_lt(&mut self) -> Result<()>;
  fn action_comparison_nq(&mut self) -> Result<()>;
  fn action_comparison_unary_ge(&mut self) -> Result<()>;
  fn action_comparison_unary_gt(&mut self) -> Result<()>;
  fn action_comparison_unary_le(&mut self) -> Result<()>;
  fn action_comparison_unary_lt(&mut self) -> Result<()>;
  fn action_conjunction(&mut self) -> Result<()>;
  fn action_context_begin(&mut self) -> Result<()>;
  fn action_context_end(&mut self) -> Result<()>;
  fn action_context_entry(&mut self) -> Result<()>;
  fn action_context_entry_tail(&mut self) -> Result<()>;
  fn action_context_type_entry(&mut self) -> Result<()>;
  fn action_context_type_entry_tail(&mut self) -> Result<()>;
  fn action_disjunction(&mut self) -> Result<()>;
  fn action_division(&mut self) -> Result<()>;
  fn action_empty_context(&mut self) -> Result<()>;
  fn action_every(&mut self) -> Result<()>;
  fn action_every_begin(&mut self) -> Result<()>;
  fn action_exponentiation(&mut self) -> Result<()>;
  fn action_expression_list_tail(&mut self) -> Result<()>;
  fn action_filter(&mut self) -> Result<()>;
  fn action_for(&mut self) -> Result<()>;
  fn action_for_begin(&mut self) -> Result<()>;
  fn action_formal_parameter_with_type(&mut self) -> Result<()>;
  fn action_formal_parameter_without_type(&mut self) -> Result<()>;
  fn action_formal_parameters_begin(&mut self) -> Result<()>;
  fn action_formal_parameters_empty(&mut self) -> Result<()>;
  fn action_formal_parameters_first(&mut self) -> Result<()>;
  fn action_formal_parameters_tail(&mut self) -> Result<()>;
  fn action_function_body(&mut self) -> Result<()>;
  fn action_function_body_external(&mut self) -> Result<()>;
  fn action_function_definition(&mut self) -> Result<()>;
  fn action_function_invocation(&mut self) -> Result<()>;
  fn action_function_invocation_no_parameters(&mut self) -> Result<()>;
  fn action_function_type(&mut self) -> Result<()>;
  fn action_function_type_parameters_empty(&mut self) -> Result<()>;
  fn action_function_type_parameters_tail(&mut self) -> Result<()>;
  fn action_if(&mut self) -> Result<()>;
  fn action_instance_of(&mut self) -> Result<()>;
  fn action_interval(&mut self) -> Result<()>;
  fn action_interval_end(&mut self) -> Result<()>;
  fn action_interval_start(&mut self) -> Result<()>;
  fn action_iteration_context_value_range(&mut self) -> Result<()>;
  fn action_iteration_context_value_single(&mut self) -> Result<()>;
  fn action_iteration_context_variable_name(&mut self) -> Result<()>;
  fn action_iteration_context_variable_name_begin(&mut self) -> Result<()>;
  fn action_iteration_contexts_tail(&mut self) -> Result<()>;
  fn action_key_name(&mut self) -> Result<()>;
  fn action_key_string(&mut self) -> Result<()>;
  fn action_list(&mut self) -> Result<()>;
  fn action_list_empty(&mut self) -> Result<()>;
  fn action_list_tail(&mut self) -> Result<()>;
  fn action_list_type(&mut self) -> Result<()>;
  fn action_literal_at(&mut self) -> Result<()>;
  fn action_literal_boolean(&mut self) -> Result<()>;
  fn action_literal_date_time(&mut self) -> Result<()>;
  fn action_literal_null(&mut self) -> Result<()>;
  fn action_literal_numeric(&mut self) -> Result<()>;
  fn action_literal_string(&mut self) -> Result<()>;
  fn action_multiplication(&mut self) -> Result<()>;
  fn action_name(&mut self) -> Result<()>;
  fn action_named_parameter(&mut self) -> Result<()>;
  fn action_named_parameters_tail(&mut self) -> Result<()>;
  fn action_negation(&mut self) -> Result<()>;
  fn action_path(&mut self) -> Result<()>;
  fn action_positional_parameters_tail(&mut self) -> Result<()>;
  fn action_qualified_name(&mut self) -> Result<()>;
  fn action_qualified_name_tail(&mut self) -> Result<()>;
  fn action_quantified_expression(&mut self) -> Result<()>;
  fn action_quantified_expression_variable_name(&mut self) -> Result<()>;
  fn action_quantified_expression_variable_name_begin(&mut self) -> Result<()>;
  fn action_quantified_expressions_tail(&mut self) -> Result<()>;
  fn action_range_literal(&mut self) -> Result<()>;
  fn action_range_literal_end(&mut self) -> Result<()>;
  fn action_range_literal_start(&mut self) -> Result<()>;
  fn action_range_type(&mut self) -> Result<()>;
  fn action_some(&mut self) -> Result<()>;
  fn action_some_begin(&mut self) -> Result<()>;
  fn action_subtraction(&mut self) -> Result<()>;
  fn action_type_name(&mut self) -> Result<()>;
  fn action_unary_tests_begin(&mut self) -> Result<()>;
  fn action_unary_tests_irrelevant(&mut self) -> Result<()>;
  fn action_unary_tests_negated(&mut self) -> Result<()>;
}

/// Calls requested reduce action.
pub fn reduce(reduce_actions: &mut impl ReduceActions, rule_number: i16) -> Result<()> {
  match rule_number {
    7 => reduce_actions.action_unary_tests_begin(),                           // $@1: %empty
    18 => reduce_actions.action_for_begin(),                                  // $@2: %empty
    19 => reduce_actions.action_for(),                                        // textual_expression: FOR $@2 iteration_contexts RETURN expression
    20 => reduce_actions.action_if(),                                         // textual_expression: IF expression THEN expression ELSE expression
    21 => reduce_actions.action_some_begin(),                                 // $@3: %empty
    22 => reduce_actions.action_some(),                                       // textual_expression: SOME $@3 quantified_expressions SATISFIES expression
    23 => reduce_actions.action_every_begin(),                                // $@4: %empty
    24 => reduce_actions.action_every(),                                      // textual_expression: EVERY $@4 quantified_expressions SATISFIES expression
    25 => reduce_actions.action_between_begin(),                              // $@5: %empty
    26 => reduce_actions.action_between(),                                    // textual_expression: expression BETWEEN $@5 expression BETWEEN_AND expression
    27 => reduce_actions.action_disjunction(),                                // textual_expression: expression OR expression
    28 => reduce_actions.action_conjunction(),                                // textual_expression: expression AND expression
    29 => reduce_actions.action_comparison_eq(),                              // textual_expression: expression EQ expression
    30 => reduce_actions.action_comparison_nq(),                              // textual_expression: expression NQ expression
    31 => reduce_actions.action_comparison_lt(),                              // textual_expression: expression LT expression
    32 => reduce_actions.action_comparison_le(),                              // textual_expression: expression LE expression
    33 => reduce_actions.action_comparison_gt(),                              // textual_expression: expression GT expression
    34 => reduce_actions.action_comparison_ge(),                              // textual_expression: expression GE expression
    35 => reduce_actions.action_comparison_in(),                              // textual_expression: expression IN LEFT_PAREN comparison_in
    36 => reduce_actions.action_comparison_in(),                              // textual_expression: expression IN expression
    37 => reduce_actions.action_addition(),                                   // textual_expression: expression PLUS expression
    38 => reduce_actions.action_subtraction(),                                // textual_expression: expression MINUS expression
    39 => reduce_actions.action_multiplication(),                             // textual_expression: expression MUL expression
    40 => reduce_actions.action_division(),                                   // textual_expression: expression DIV expression
    41 => reduce_actions.action_exponentiation(),                             // textual_expression: expression EXP expression
    42 => reduce_actions.action_negation(),                                   // textual_expression: MINUS expression
    43 => reduce_actions.action_type_name(),                                  // $@6: %empty
    44 => reduce_actions.action_instance_of(),                                // textual_expression: expression INSTANCE OF $@6 type
    45 => reduce_actions.action_path(),                                       // textual_expression: expression DOT NAME
    46 => reduce_actions.action_filter(),                                     // textual_expression: expression LEFT_BRACKET expression RIGHT_BRACKET
    50 => reduce_actions.action_name(),                                       // textual_expression: NAME
    52 => reduce_actions.action_expression_list_tail(),                       // textual_expressions: textual_expression COMMA textual_expressions
    53 => reduce_actions.action_expression_list_tail(),                       // textual_expressions: textual_expression
    54 => reduce_actions.action_unary_tests_irrelevant(),                     // unary_tests: MINUS
    55 => reduce_actions.action_unary_tests_negated(),                        // unary_tests: NOT LEFT_PAREN positive_unary_tests RIGHT_PAREN
    57 => reduce_actions.action_expression_list_tail(),                       // positive_unary_tests: expression COMMA positive_unary_tests
    58 => reduce_actions.action_expression_list_tail(),                       // positive_unary_tests: expression
    59 => reduce_actions.action_expression_list_tail(),                       // comparison_in: expression COMMA positive_unary_tests RIGHT_PAREN
    60 => reduce_actions.action_addition(),                                   // simple_expression: expression PLUS expression
    61 => reduce_actions.action_subtraction(),                                // simple_expression: expression MINUS expression
    62 => reduce_actions.action_multiplication(),                             // simple_expression: expression MUL expression
    63 => reduce_actions.action_division(),                                   // simple_expression: expression DIV expression
    64 => reduce_actions.action_exponentiation(),                             // simple_expression: expression EXP expression
    65 => reduce_actions.action_negation(),                                   // simple_expression: MINUS expression
    67 => reduce_actions.action_expression_list_tail(),                       // simple_expressions: simple_expression COMMA simple_expressions
    68 => reduce_actions.action_expression_list_tail(),                       // simple_expressions: simple_expression
    69 => reduce_actions.action_comparison_unary_lt(),                        // simple_positive_unary_test: LT endpoint
    70 => reduce_actions.action_comparison_unary_le(),                        // simple_positive_unary_test: LE endpoint
    71 => reduce_actions.action_comparison_unary_gt(),                        // simple_positive_unary_test: GT endpoint
    72 => reduce_actions.action_comparison_unary_ge(),                        // simple_positive_unary_test: GE endpoint
    74 => reduce_actions.action_interval(),                                   // interval: interval_start interval_end
    75 => reduce_actions.action_interval_start(),                             // interval_start: LEFT_PAREN endpoint ELLIPSIS
    76 => reduce_actions.action_interval_start(),                             // interval_start: RIGHT_BRACKET endpoint ELLIPSIS
    77 => reduce_actions.action_interval_start(),                             // interval_start: LEFT_BRACKET endpoint ELLIPSIS
    78 => reduce_actions.action_interval_end(),                               // interval_end: endpoint RIGHT_PAREN
    79 => reduce_actions.action_interval_end(),                               // interval_end: endpoint LEFT_BRACKET
    80 => reduce_actions.action_interval_end(),                               // interval_end: endpoint RIGHT_BRACKET
    85 => reduce_actions.action_literal_null(),                               // literal: NULL
    86 => reduce_actions.action_literal_numeric(),                            // simple_literal: NUMERIC
    87 => reduce_actions.action_literal_string(),                             // simple_literal: STRING
    88 => reduce_actions.action_literal_boolean(),                            // simple_literal: BOOLEAN
    89 => reduce_actions.action_literal_at(),                                 // simple_literal: AT STRING
    90 => reduce_actions.action_literal_date_time(),                          // $@7: %empty
    92 => reduce_actions.action_context_begin(),                              // $@8: %empty
    93 => reduce_actions.action_context_end(),                                // context: LEFT_BRACE $@8 context_entries
    94 => reduce_actions.action_empty_context(),                              // context_entries: RIGHT_BRACE
    95 => reduce_actions.action_context_entry_tail(),                         // context_entries: context_entry context_entry_tail
    96 => reduce_actions.action_context_entry(),                              // context_entry: key COLON expression
    98 => reduce_actions.action_context_entry_tail(),                         // context_entry_tail: COMMA context_entry context_entry_tail
    99 => reduce_actions.action_key_name(),                                   // key: NAME
    100 => reduce_actions.action_key_string(),                                // key: STRING
    101 => reduce_actions.action_list(),                                      // list: LEFT_BRACKET list_items
    102 => reduce_actions.action_list_empty(),                                // list_items: RIGHT_BRACKET
    103 => reduce_actions.action_list_tail(),                                 // list_items: expression list_tail
    105 => reduce_actions.action_list_tail(),                                 // list_tail: COMMA expression list_tail
    106 => reduce_actions.action_function_invocation_no_parameters(),         // parameters: RIGHT_PAREN
    107 => reduce_actions.action_function_invocation(),                       // parameters: named_parameters
    108 => reduce_actions.action_function_invocation(),                       // parameters: positional_parameters
    109 => reduce_actions.action_named_parameters_tail(),                     // named_parameters: named_parameter named_parameters_tail
    110 => reduce_actions.action_named_parameter(),                           // named_parameter: NAME COLON expression
    112 => reduce_actions.action_named_parameters_tail(),                     // named_parameters_tail: COMMA named_parameter named_parameters_tail
    113 => reduce_actions.action_positional_parameters_tail(),                // positional_parameters: expression positional_parameters_tail
    115 => reduce_actions.action_positional_parameters_tail(),                // positional_parameters_tail: COMMA expression positional_parameters_tail
    116 => reduce_actions.action_qualified_name_tail(),                       // qualified_name: NAME DOT qualified_name
    117 => reduce_actions.action_qualified_name(),                            // qualified_name: NAME
    118 => reduce_actions.action_built_in_type_name(),                        // type: BUILT_IN_TYPE_NAME
    120 => reduce_actions.action_type_name(),                                 // $@9: %empty
    121 => reduce_actions.action_list_type(),                                 // type: LIST LT $@9 type GT
    122 => reduce_actions.action_type_name(),                                 // $@10: %empty
    123 => reduce_actions.action_range_type(),                                // type: RANGE LT $@10 type GT
    125 => reduce_actions.action_type_name(),                                 // $@11: %empty
    126 => reduce_actions.action_function_type(),                             // type: FUNCTION LT function_type_parameters RIGHT_ARROW $@11 type
    127 => reduce_actions.action_context_type_entry_tail(),                   // context_type_entries: context_type_entry context_type_entry_tail
    128 => reduce_actions.action_type_name(),                                 // $@12: %empty
    129 => reduce_actions.action_context_type_entry(),                        // context_type_entry: NAME COLON $@12 type
    131 => reduce_actions.action_context_type_entry_tail(),                   // context_type_entry_tail: COMMA context_type_entry context_type_entry_tail
    132 => reduce_actions.action_function_type_parameters_empty(),            // function_type_parameters: GT
    133 => reduce_actions.action_type_name(),                                 // $@13: %empty
    134 => reduce_actions.action_function_type_parameters_tail(),             // function_type_parameters: $@13 type function_type_parameters_tail
    136 => reduce_actions.action_type_name(),                                 // $@14: %empty
    137 => reduce_actions.action_function_type_parameters_tail(),             // function_type_parameters_tail: COMMA $@14 type function_type_parameters_tail
    138 => reduce_actions.action_iteration_contexts_tail(),                   // iteration_contexts: iteration_context COMMA iteration_contexts
    139 => reduce_actions.action_iteration_contexts_tail(),                   // iteration_contexts: iteration_context
    140 => reduce_actions.action_iteration_context_variable_name_begin(),     // $@15: %empty
    141 => reduce_actions.action_iteration_context_variable_name(),           // $@16: %empty
    143 => reduce_actions.action_iteration_context_value_single(),            // iteration_context_value: expression
    144 => reduce_actions.action_iteration_context_value_range(),             // iteration_context_value: expression ELLIPSIS expression
    145 => reduce_actions.action_quantified_expressions_tail(),               // quantified_expressions: quantified_expression COMMA quantified_expressions
    146 => reduce_actions.action_quantified_expressions_tail(),               // quantified_expressions: quantified_expression
    147 => reduce_actions.action_quantified_expression_variable_name_begin(), // $@17: %empty
    148 => reduce_actions.action_quantified_expression_variable_name(),       // $@18: %empty
    149 => reduce_actions.action_quantified_expression(),                     // quantified_expression: $@17 NAME $@18 IN expression
    150 => reduce_actions.action_formal_parameters_begin(),                   // $@19: %empty
    151 => reduce_actions.action_function_definition(),                       // function_definition: FUNCTION LEFT_PAREN $@19 formal_parameters external
    152 => reduce_actions.action_formal_parameters_empty(),                   // formal_parameters: RIGHT_PAREN
    153 => reduce_actions.action_formal_parameters_first(),                   // $@20: %empty
    156 => reduce_actions.action_formal_parameters_tail(),                    // $@21: %empty
    158 => reduce_actions.action_type_name(),                                 // $@22: %empty
    159 => reduce_actions.action_formal_parameter_with_type(),                // formal_parameter: NAME COLON $@22 type
    160 => reduce_actions.action_formal_parameter_without_type(),             // formal_parameter: NAME
    161 => reduce_actions.action_function_body_external(),                    // external: EXTERNAL expression
    162 => reduce_actions.action_function_body(),                             // external: expression
    163 => reduce_actions.action_range_literal(),                             // range_literal: range_literal_start range_literal_end
    164 => reduce_actions.action_range_literal_start(),                       // range_literal_start: LEFT_PAREN range_endpoint ELLIPSIS
    165 => reduce_actions.action_range_literal_start(),                       // range_literal_start: RIGHT_BRACKET range_endpoint ELLIPSIS
    166 => reduce_actions.action_range_literal_start(),                       // range_literal_start: LEFT_BRACKET range_endpoint ELLIPSIS
    167 => reduce_actions.action_range_literal_end(),                         // range_literal_end: range_endpoint RIGHT_PAREN
    168 => reduce_actions.action_range_literal_end(),                         // range_literal_end: range_endpoint LEFT_BRACKET
    169 => reduce_actions.action_range_literal_end(),                         // range_literal_end: range_endpoint RIGHT_BRACKET
    170 => reduce_actions.action_literal_numeric(),                           // range_endpoint: NUMERIC
    171 => reduce_actions.action_literal_string(),                            // range_endpoint: STRING
    172 => reduce_actions.action_literal_date_time(),                         // $@23: %empty
    _ => Ok(()),
  }
}
