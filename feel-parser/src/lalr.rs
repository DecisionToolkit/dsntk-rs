//! # Parsing tables
//!
//! Parsing tables extracted from files generated by `Bison` for `C` language.
//! This file was generated by dedicated tool, do not modify it manually.

use dsntk_common::Result;

/// Types of tokens returned by lexer.
#[derive(Clone)]
pub enum TokenType {
  YyEmpty = -2,
  YyEof = 0,
  YyError = 256,
  YyUndef = 257,
  StartExpression = 258,
  StartBoxedExpression = 259,
  StartTextualExpression = 260,
  StartTextualExpressions = 261,
  StartUnaryTests = 262,
  StartSimpleExpression = 263,
  StartSimpleExpressions = 264,
  StartSimpleValue = 265,
  StartRangeLiteral = 266,
  At = 267,
  Not = 268,
  Colon = 269,
  Comma = 270,
  Every = 271,
  For = 272,
  LeftBrace = 273,
  Null = 274,
  RightArrow = 275,
  Of = 276,
  List = 277,
  Range = 278,
  Context = 279,
  Then = 280,
  Function = 281,
  External = 282,
  If = 283,
  RightBrace = 284,
  Return = 285,
  Some = 286,
  Numeric = 287,
  String = 288,
  Boolean = 289,
  Satisfies = 290,
  Else = 291,
  Or = 292,
  And = 293,
  Eq = 294,
  Ne = 295,
  Lt = 296,
  Le = 297,
  Gt = 298,
  Ge = 299,
  Between = 300,
  BetweenAnd = 301,
  In = 302,
  Minus = 303,
  Plus = 304,
  Mul = 305,
  Div = 306,
  Exp = 307,
  Instance = 309,
  Name = 310,
  NameDateTime = 311,
  BuiltInTypeName = 312,
  LeftParen = 313,
  RightParen = 314,
  LeftBracket = 315,
  RightBracket = 316,
  Ellipsis = 317,
  Dot = 318,
}

/// Kinds of symbols recognized by parser.
#[allow(clippy::enum_variant_names)]
pub enum SymbolKind {
  YyEmpty = -2,
  YyEof = 0,
  YyError = 1,
  YyUndef = 2,
  YyAccept = 64,
}

///
pub const YY_PACT_N_INF: i16 = -181;

///
pub const YY_TABLE_N_INF: i16 = -119;

///
pub const YY_FINAL: usize = 69;

///
pub const YY_LAST: i16 = 1031;

///
pub const YY_N_TOKENS: usize = 64;

/// `YY_TRANSLATE[TOKEN-NUM]` - symbol number corresponding to TOKEN-NUM as returned by lexer.
pub const YY_TRANSLATE: [i8; 319] = [
  0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
];

/// `YY_PACT[STATE-NUM]` - index in YY_TABLE of the portion describing STATE-NUM.
pub const YY_PACT: [i16; 327] = [
  235, 390, 7, 390, 390, -181, 437, 437, 126, 59, 29, 13, -181, -181, -181, -181, -11, 390, -181, -181, -181, -181, 390, 390, 390, 390, 390, 390, 390, -181, 10, 390, 484, 390,
  865, -181, -181, -181, -181, 390, -181, -181, -181, -181, -181, 484, -181, 865, 58, 34, -181, 246, 390, 24, 892, -181, -181, 150, -181, 51, -181, 14, -181, -181, 8, 8, 8, -181,
  8, -181, -181, -181, -181, -7, -181, 702, -181, 26, -181, -181, -181, -181, -181, -181, 172, -181, 757, 48, 703, 561, 69, -181, 71, 390, 390, 390, 390, 390, 390, 390, 390, -181,
  531, 390, 390, 390, 390, 390, 131, 293, 390, 98, -181, 207, 561, 390, 99, 390, 654, -181, -181, 28, 106, 390, 390, 390, 390, 390, 437, -181, -181, 108, 102, 109, 116, -181, 222,
  112, 155, 132, 166, 165, 136, -181, -181, -181, -181, 92, 183, -17, 390, 167, 293, -181, -181, 390, -181, -181, -181, -181, 918, 943, 968, 968, 968, 968, 968, 968, 390, 390,
  125, 161, 161, 171, 171, 172, -181, 192, -181, 592, -181, -181, 0, -181, 784, -181, -181, -181, -181, -181, 390, 390, -181, 20, 85, 21, 140, 141, -181, -181, -181, -181, -181,
  -181, -181, -181, 390, -181, -181, 390, -181, -181, -10, -181, -181, 390, 193, -181, 343, -181, 730, 390, -181, 561, 811, 623, -181, 89, 390, 390, -181, -181, 154, -181, -181,
  -181, 151, -181, 293, 865, -181, 169, 865, -181, 175, 92, 865, -181, 390, 865, -181, 2, 390, 865, -181, 390, 390, 177, 195, 212, 215, -181, -181, -181, 865, 592, 192, 0, -181,
  -181, 390, 390, -181, 89, 865, 178, -181, -181, 865, 125, 189, -181, -181, 202, 217, -181, -181, 865, 838, -181, -181, -181, -181, 89, 89, 247, -181, 17, -181, 251, 89, 390, 2,
  230, 232, -181, 202, -181, -181, -181, 22, 865, -181, -181, -181, 89, 17, 89, -181, -181, -181, -181, -181, -181, 89, 22, -181,
];

/// `YY_DEF_ACT[STATE-NUM]` - default reduction number in state STATE-NUM.
/// Performed when YY_TABLE does not specify something else to do.
/// Zero means the default is an error.
pub const YY_DEF_ACT: [u8; 327] = [
  0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 22, 17, 93, 86, 0, 0, 20, 87, 88, 89, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 2, 12, 13, 48, 74, 0, 47, 85, 16, 14, 15, 0, 3, 0, 13, 13, 5, 0,
  0, 49, 0, 8, 65, 85, 83, 67, 9, 118, 10, 84, 0, 0, 0, 11, 0, 1, 90, 148, 141, 0, 151, 0, 148, 82, 72, 73, 68, 69, 70, 71, 41, 91, 82, 0, 103, 82, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 53, 57, 7, 55, 41, 0, 0, 0, 0, 0, 0, 0, 171, 172, 0, 0, 0, 0, 164, 0, 0, 147, 0, 0, 140, 0, 95, 101, 100, 94, 0, 0, 0, 0, 0,
  0, 50, 76, 0, 105, 104, 78, 77, 26, 27, 28, 29, 30, 31, 32, 33, 0, 0, 35, 37, 36, 38, 39, 40, 42, 49, 107, 0, 46, 108, 0, 109, 0, 44, 79, 80, 81, 51, 0, 0, 117, 37, 36, 38, 39,
  40, 66, 173, 165, 167, 166, 168, 169, 170, 0, 148, 149, 0, 141, 142, 0, 98, 96, 0, 161, 153, 0, 154, 0, 0, 92, 0, 0, 82, 34, 0, 0, 0, 115, 114, 0, 112, 110, 45, 0, 56, 0, 23,
  146, 0, 18, 139, 0, 0, 97, 159, 0, 163, 152, 0, 0, 21, 106, 0, 0, 0, 0, 0, 0, 119, 120, 43, 111, 0, 0, 0, 54, 174, 0, 0, 99, 0, 162, 0, 156, 155, 19, 25, 0, 121, 123, 0, 134,
  116, 113, 150, 144, 143, 160, 157, 58, 0, 0, 0, 125, 0, 133, 0, 0, 0, 0, 0, 0, 129, 0, 131, 128, 126, 0, 145, 158, 122, 124, 0, 0, 0, 137, 136, 135, 130, 132, 127, 0, 0, 138,
];

/// `YY_P_GOTO[NTERM-NUM]`
pub const YY_P_GOTO: [i16; 77] = [
  -181, -181, -181, -1, 274, 15, -181, -181, -181, -181, -181, 176, -181, -180, -181, 278, 164, -181, -181, -181, -181, 30, 285, -181, 1, -181, -181, -181, -181, 83, 52, -181,
  -181, -181, 73, -148, -181, 66, 32, -181, 38, 6, -131, -181, -181, -181, -181, 9, -181, -8, -181, -181, -12, -181, 104, -181, -181, -181, -181, -75, -181, -181, -181, -181,
  -181, -181, -181, 16, -181, 41, -181, -181, -181, -181, -181, 184, -181,
];

/// `YY_DEF_GOTO[NTERM-NUM]`
pub const YY_DEF_GOTO: [i16; 77] = [
  0, 10, 51, 77, 35, 36, 72, 76, 71, 168, 227, 50, 119, 120, 226, 59, 60, 37, 38, 39, 112, 87, 56, 40, 41, 152, 42, 73, 146, 147, 214, 148, 43, 91, 157, 180, 181, 182, 234, 183,
  231, 262, 263, 293, 294, 317, 296, 297, 315, 308, 299, 300, 320, 324, 140, 141, 142, 244, 289, 137, 138, 139, 241, 44, 149, 218, 251, 277, 302, 219, 273, 250, 67, 68, 135, 132,
  238,
];

/// `YY_TABLE[YY_PACT[STATE-NUM]]` - what to do in state STATE-NUM.
/// If positive, shift that token.
/// If negative, reduce the rule whose number is the opposite.
/// If `YY_TABLE_N_INF`, syntax error.
pub const YY_TABLE: [i16; 1032] = [
  34, 151, 47, 47, 222, 54, 54, 57, 57, 63, 236, 237, 58, 58, 58, 232, 75, 275, 48, 49, -60, -61, 143, 144, -118, 14, 144, 84, -64, 69, 86, 89, 306, 16, -52, -60, -61, 318, 216,
  -118, 129, 130, 217, -64, 114, 145, 70, 74, 145, 115, 118, 121, 78, 79, 80, 81, 82, 83, -4, 233, 307, 276, 90, 92, 131, 319, 128, 45, 85, 113, 105, 106, 107, 107, 108, 108, 280,
  122, 109, 109, 110, 110, 108, 111, 111, -59, 109, 122, 110, 111, 269, 111, 160, 161, 162, 163, 164, 165, 166, 167, -59, 170, 171, 172, 173, 174, 175, 212, 179, 184, 154, 257,
  258, 259, 47, 260, 84, 64, 92, 65, 66, 213, 193, 194, 195, 196, 197, 54, 192, 57, 49, 158, 240, 159, 58, 105, 106, 107, 11, 108, -62, -63, 290, 109, 61, 110, 261, 206, 111, 220,
  -84, 179, 176, 185, 223, -62, -63, 190, 19, 20, 21, 61, 303, 304, 200, -84, 199, 224, 225, 310, 207, 201, 102, 103, 104, 105, 106, 107, 202, 108, 210, 61, 30, 109, 321, 110,
  323, 208, 111, 118, 118, 211, 107, 325, 108, 108, 209, 215, 109, 109, 110, 110, 221, 111, 111, 239, 228, 247, 242, 266, 268, 105, 106, 107, 246, 108, 270, 249, 281, 109, 253,
  110, 271, 107, 111, 108, 108, 264, 265, 109, 109, 110, 110, 216, 111, 111, 282, 179, 1, 2, 3, 4, 5, 6, 7, 8, 9, 274, 292, 133, 134, 278, 136, 283, 279, 118, 284, 295, 11, 116,
  298, 305, 12, 13, 14, 15, 186, 187, 188, 287, 288, 309, 16, 313, 17, 314, 46, 18, 19, 20, 21, 203, 204, 205, 55, 22, 23, 24, 25, 26, 27, 189, 198, 62, 117, 245, 254, 272, 267,
  286, 311, 29, 30, 285, 31, 11, 32, 33, 322, 12, 13, 14, 15, 326, 243, 316, 291, 0, 312, 16, 0, 17, 0, 0, 18, 19, 20, 21, 0, 0, 0, 0, 22, 23, 24, 25, 26, 27, 0, 0, 0, 28, 0, 0,
  0, 0, 0, 0, 177, 30, 0, 31, 178, 32, 33, 11, 0, 0, 0, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 16, 248, 17, 0, 0, 18, 19, 20, 21, 0, 0, 0, 0, 22, 23, 24, 25, 26, 27, 0, 0, 0, 28, 0, 0,
  0, 0, 0, 0, 29, 30, 0, 31, 11, 32, 33, 0, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 18, 19, 20, 21, 0, 0, 0, 0, 22, 23, 24, 25, 26, 27, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0,
  29, 30, 0, 31, 11, 32, 33, 0, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 18, 19, 20, 21, 0, 0, 0, 0, 22, 23, 24, 25, 26, 27, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 53, 30, 0,
  31, 11, 32, 33, 0, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 18, 19, 20, 21, 0, 0, 0, 0, 22, 23, 24, 25, 26, 27, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 29, 30, 0, 31, 11, 32,
  88, 0, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 16, 0, 17, 0, 0, 18, 19, 20, 21, 0, 0, 0, 0, 22, 23, 24, 25, 26, 27, 155, 0, 0, 28, 0, 0, 0, 0, 0, 0, 29, 30, 0, 169, 0, 32, 33, 0, 0,
  0, 0, 0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 229, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 0, 110, 156, 0, 111, 0, 0, 0, 0, 93, 94, 95, 96, 97, 98, 99, 100, 101,
  256, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 230, 110, 0, 0, 111, 0, 0, 0, 0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 191, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0,
  0, 109, 153, 110, 0, 0, 111, 0, 0, 0, 0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 0, 110, 11, 0, 111, 0, 12, 13, 14, 15, 0,
  0, 0, 0, 150, 0, 16, 0, 17, 0, 0, 18, 19, 20, 21, 0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 0, 108, 0, 29, 30, 109, 0, 110, 0, 0, 111, 252, 93,
  94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 0, 110, 0, 0, 111, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106,
  107, 0, 108, 0, 0, 0, 109, 153, 110, 0, 0, 111, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 0, 110, 235, 0, 111, 93, 94, 95, 96,
  97, 98, 99, 100, 101, 255, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 0, 110, 0, 0, 111, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 0, 108,
  0, 0, 0, 109, 0, 110, 0, 301, 111, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 0, 110, 0, 0, 111, 93, 94, 95, 96, 97, 98, 99,
  100, 101, 0, 102, 123, 124, 125, 126, 127, 0, 108, 0, 0, 0, 109, 0, 110, 0, 0, 111, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 0,
  110, 0, 0, 111, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 0, 110, 0, 0, 111, -119, -119, -119, -119, -119, -119, 101, 0, 102, 103,
  104, 105, 106, 107, 0, 108, 0, 0, 0, 109, 0, 110, 0, 0, 111,
];

/// ???
pub const YY_CHECK: [i16; 1032] = [
  1, 76, 3, 4, 152, 6, 7, 6, 7, 8, 190, 191, 6, 7, 8, 15, 17, 15, 3, 4, 0, 0, 29, 33, 0, 18, 33, 28, 0, 0, 31, 32, 15, 26, 0, 15, 15, 15, 55, 15, 32, 33, 59, 15, 45, 55, 33, 58,
  55, 15, 51, 52, 22, 23, 24, 25, 26, 27, 0, 59, 43, 59, 32, 33, 56, 43, 15, 60, 58, 39, 50, 51, 52, 52, 54, 54, 256, 63, 58, 58, 60, 60, 54, 63, 63, 0, 58, 63, 60, 63, 238, 63,
  93, 94, 95, 96, 97, 98, 99, 100, 15, 102, 103, 104, 105, 106, 107, 15, 109, 110, 62, 22, 23, 24, 115, 26, 117, 58, 88, 60, 61, 29, 123, 124, 125, 126, 127, 128, 122, 128, 115,
  62, 207, 62, 128, 50, 51, 52, 12, 54, 0, 0, 273, 58, 55, 60, 57, 35, 63, 150, 0, 152, 21, 55, 155, 15, 15, 58, 32, 33, 34, 55, 293, 294, 62, 15, 58, 168, 169, 300, 15, 62, 47,
  48, 49, 50, 51, 52, 62, 54, 15, 55, 56, 58, 315, 60, 317, 55, 63, 190, 191, 55, 52, 324, 54, 54, 30, 14, 58, 58, 60, 60, 35, 63, 63, 206, 14, 14, 209, 55, 59, 50, 51, 52, 215,
  54, 47, 218, 41, 58, 221, 60, 47, 52, 63, 54, 54, 228, 229, 58, 58, 60, 60, 55, 63, 63, 41, 238, 3, 4, 5, 6, 7, 8, 9, 10, 11, 248, 59, 65, 66, 252, 68, 41, 255, 256, 41, 55, 12,
  13, 43, 14, 16, 17, 18, 19, 59, 60, 61, 270, 271, 20, 26, 43, 28, 43, 2, 31, 32, 33, 34, 59, 60, 61, 6, 39, 40, 41, 42, 43, 44, 115, 128, 8, 48, 212, 223, 245, 232, 267, 301,
  55, 56, 265, 58, 12, 60, 61, 316, 16, 17, 18, 19, 325, 210, 306, 275, -1, 302, 26, -1, 28, -1, -1, 31, 32, 33, 34, -1, -1, -1, -1, 39, 40, 41, 42, 43, 44, -1, -1, -1, 48, -1,
  -1, -1, -1, -1, -1, 55, 56, -1, 58, 59, 60, 61, 12, -1, -1, -1, 16, 17, 18, 19, -1, -1, -1, -1, -1, -1, 26, 27, 28, -1, -1, 31, 32, 33, 34, -1, -1, -1, -1, 39, 40, 41, 42, 43,
  44, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, 55, 56, -1, 58, 12, 60, 61, -1, 16, 17, 18, 19, -1, -1, -1, -1, -1, -1, 26, -1, 28, -1, -1, 31, 32, 33, 34, -1, -1, -1, -1, 39, 40,
  41, 42, 43, 44, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, 55, 56, -1, 58, 12, 60, 61, -1, 16, 17, 18, 19, -1, -1, -1, -1, -1, -1, 26, -1, 28, -1, -1, 31, 32, 33, 34, -1, -1, -1,
  -1, 39, 40, 41, 42, 43, 44, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, 55, 56, -1, 58, 12, 60, 61, -1, 16, 17, 18, 19, -1, -1, -1, -1, -1, -1, 26, -1, 28, -1, -1, 31, 32, 33, 34,
  -1, -1, -1, -1, 39, 40, 41, 42, 43, 44, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, 55, 56, -1, 58, 12, 60, 61, -1, 16, 17, 18, 19, -1, -1, -1, -1, -1, -1, 26, -1, 28, -1, -1, 31,
  32, 33, 34, -1, -1, -1, -1, 39, 40, 41, 42, 43, 44, 15, -1, -1, 48, -1, -1, -1, -1, -1, -1, 55, 56, -1, 58, -1, 60, 61, -1, -1, -1, -1, -1, 37, 38, 39, 40, 41, 42, 43, 44, 45,
  15, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, -1, 60, 61, -1, 63, -1, -1, -1, -1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 15, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58,
  59, 60, -1, -1, 63, -1, -1, -1, -1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 15, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, 59, 60, -1, -1, 63, -1, -1, -1, -1, 37, 38, 39, 40,
  41, 42, 43, 44, 45, -1, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, -1, 60, 12, -1, 63, -1, 16, 17, 18, 19, -1, -1, -1, -1, 25, -1, 26, -1, 28, -1, -1, 31, 32, 33, 34, -1,
  37, 38, 39, 40, 41, 42, 43, 44, 45, -1, 47, 48, 49, 50, 51, 52, -1, 54, -1, 55, 56, 58, -1, 60, -1, -1, 63, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, -1, 47, 48, 49, 50, 51, 52,
  -1, 54, -1, -1, -1, 58, -1, 60, -1, -1, 63, 37, 38, 39, 40, 41, 42, 43, 44, 45, -1, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, 59, 60, -1, -1, 63, 37, 38, 39, 40, 41, 42,
  43, 44, 45, -1, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, -1, 60, 61, -1, 63, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, -1,
  60, -1, -1, 63, 37, 38, 39, 40, 41, 42, 43, 44, 45, -1, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, -1, 60, -1, 62, 63, 37, 38, 39, 40, 41, 42, 43, 44, 45, -1, 47, 48, 49,
  50, 51, 52, -1, 54, -1, -1, -1, 58, -1, 60, -1, -1, 63, 37, 38, 39, 40, 41, 42, 43, 44, 45, -1, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, -1, 60, -1, -1, 63, 38, 39, 40,
  41, 42, 43, 44, 45, -1, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, -1, 60, -1, -1, 63, 39, 40, 41, 42, 43, 44, 45, -1, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, -1,
  60, -1, -1, 63, 39, 40, 41, 42, 43, 44, 45, -1, 47, 48, 49, 50, 51, 52, -1, 54, -1, -1, -1, 58, -1, 60, -1, -1, 63,
];

/// `YY_R1[YYN]` - symbol number of symbol that rule YYN derives.
pub const YY_R1: [u8; 175] = [
  0, 64, 65, 65, 65, 65, 66, 65, 65, 65, 65, 65, 67, 67, 68, 68, 68, 70, 69, 69, 71, 69, 72, 69, 73, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 74, 69,
  69, 69, 69, 69, 69, 69, 69, 75, 75, 76, 76, 76, 77, 77, 78, 79, 79, 79, 79, 79, 79, 79, 80, 80, 81, 81, 81, 81, 81, 81, 81, 82, 83, 83, 83, 84, 84, 84, 85, 86, 86, 87, 87, 88,
  88, 88, 88, 89, 88, 91, 90, 92, 92, 93, 94, 94, 95, 95, 96, 97, 97, 98, 98, 99, 99, 99, 100, 101, 102, 102, 103, 104, 104, 105, 105, 106, 106, 107, 106, 108, 106, 106, 109, 106,
  110, 112, 111, 113, 113, 114, 115, 114, 116, 117, 116, 118, 118, 120, 121, 119, 122, 122, 123, 123, 125, 126, 124, 128, 127, 129, 130, 129, 131, 132, 131, 134, 133, 133, 135,
  135, 136, 137, 137, 137, 138, 138, 138, 139, 139, 140, 139,
];

/// `YY_R2[YYN]` - number of symbols on the right hand side of rule YYN.
pub const YY_R2: [i8; 175] = [
  0, 2, 2, 2, 2, 2, 0, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 5, 6, 0, 5, 0, 5, 0, 6, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 2, 0, 5, 3, 4, 3, 1, 1, 1, 3, 3, 1, 1, 4, 1, 3, 1, 4,
  3, 3, 3, 3, 3, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 1, 2, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 4, 0, 3, 1, 2, 3, 1, 3, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 2, 3, 1, 3, 2, 1, 3, 3,
  1, 1, 1, 0, 5, 0, 5, 3, 0, 6, 2, 0, 4, 1, 3, 1, 0, 3, 1, 0, 4, 3, 1, 0, 0, 5, 1, 3, 3, 1, 0, 0, 5, 0, 5, 1, 0, 3, 1, 0, 4, 0, 4, 1, 2, 1, 2, 3, 3, 3, 2, 2, 2, 1, 1, 0, 4,
];

///Trait for reduce action definitions.
pub trait ReduceActions {
  fn action_addition(&mut self) -> Result<()>;
  fn action_between(&mut self) -> Result<()>;
  fn action_between_begin(&mut self) -> Result<()>;
  fn action_built_in_type_name(&mut self) -> Result<()>;
  fn action_comparison_eq(&mut self) -> Result<()>;
  fn action_comparison_ge(&mut self) -> Result<()>;
  fn action_comparison_gt(&mut self) -> Result<()>;
  fn action_comparison_in(&mut self) -> Result<()>;
  fn action_comparison_le(&mut self) -> Result<()>;
  fn action_comparison_lt(&mut self) -> Result<()>;
  fn action_comparison_ne(&mut self) -> Result<()>;
  fn action_comparison_unary_eq(&mut self) -> Result<()>;
  fn action_comparison_unary_ge(&mut self) -> Result<()>;
  fn action_comparison_unary_gt(&mut self) -> Result<()>;
  fn action_comparison_unary_le(&mut self) -> Result<()>;
  fn action_comparison_unary_lt(&mut self) -> Result<()>;
  fn action_comparison_unary_ne(&mut self) -> Result<()>;
  fn action_conjunction(&mut self) -> Result<()>;
  fn action_context_begin(&mut self) -> Result<()>;
  fn action_context_end(&mut self) -> Result<()>;
  fn action_context_entry(&mut self) -> Result<()>;
  fn action_context_entry_tail(&mut self) -> Result<()>;
  fn action_context_type_entry(&mut self) -> Result<()>;
  fn action_context_type_entry_tail(&mut self) -> Result<()>;
  fn action_disjunction(&mut self) -> Result<()>;
  fn action_division(&mut self) -> Result<()>;
  fn action_empty_context(&mut self) -> Result<()>;
  fn action_every(&mut self) -> Result<()>;
  fn action_every_begin(&mut self) -> Result<()>;
  fn action_exponentiation(&mut self) -> Result<()>;
  fn action_expression_list_tail(&mut self) -> Result<()>;
  fn action_filter(&mut self) -> Result<()>;
  fn action_for(&mut self) -> Result<()>;
  fn action_for_begin(&mut self) -> Result<()>;
  fn action_formal_parameter_with_type(&mut self) -> Result<()>;
  fn action_formal_parameter_without_type(&mut self) -> Result<()>;
  fn action_formal_parameters_begin(&mut self) -> Result<()>;
  fn action_formal_parameters_empty(&mut self) -> Result<()>;
  fn action_formal_parameters_first(&mut self) -> Result<()>;
  fn action_formal_parameters_tail(&mut self) -> Result<()>;
  fn action_function_body(&mut self) -> Result<()>;
  fn action_function_body_external(&mut self) -> Result<()>;
  fn action_function_definition(&mut self) -> Result<()>;
  fn action_function_invocation(&mut self) -> Result<()>;
  fn action_function_invocation_no_parameters(&mut self) -> Result<()>;
  fn action_function_type(&mut self) -> Result<()>;
  fn action_function_type_parameters_empty(&mut self) -> Result<()>;
  fn action_function_type_parameters_tail(&mut self) -> Result<()>;
  fn action_if(&mut self) -> Result<()>;
  fn action_instance_of(&mut self) -> Result<()>;
  fn action_interval(&mut self) -> Result<()>;
  fn action_interval_end(&mut self) -> Result<()>;
  fn action_interval_start(&mut self) -> Result<()>;
  fn action_iteration_context_value_range(&mut self) -> Result<()>;
  fn action_iteration_context_value_single(&mut self) -> Result<()>;
  fn action_iteration_context_variable_name(&mut self) -> Result<()>;
  fn action_iteration_context_variable_name_begin(&mut self) -> Result<()>;
  fn action_iteration_contexts_tail(&mut self) -> Result<()>;
  fn action_key_name(&mut self) -> Result<()>;
  fn action_key_string(&mut self) -> Result<()>;
  fn action_list(&mut self) -> Result<()>;
  fn action_list_empty(&mut self) -> Result<()>;
  fn action_list_tail(&mut self) -> Result<()>;
  fn action_list_type(&mut self) -> Result<()>;
  fn action_literal_at(&mut self) -> Result<()>;
  fn action_literal_boolean(&mut self) -> Result<()>;
  fn action_literal_date_time(&mut self) -> Result<()>;
  fn action_literal_null(&mut self) -> Result<()>;
  fn action_literal_numeric(&mut self) -> Result<()>;
  fn action_literal_string(&mut self) -> Result<()>;
  fn action_multiplication(&mut self) -> Result<()>;
  fn action_name(&mut self) -> Result<()>;
  fn action_named_parameter(&mut self) -> Result<()>;
  fn action_named_parameters_tail(&mut self) -> Result<()>;
  fn action_negation(&mut self) -> Result<()>;
  fn action_path(&mut self) -> Result<()>;
  fn action_positional_parameters_tail(&mut self) -> Result<()>;
  fn action_qualified_name(&mut self) -> Result<()>;
  fn action_qualified_name_tail(&mut self) -> Result<()>;
  fn action_quantified_expression(&mut self) -> Result<()>;
  fn action_quantified_expression_variable_name(&mut self) -> Result<()>;
  fn action_quantified_expression_variable_name_begin(&mut self) -> Result<()>;
  fn action_quantified_expressions_tail(&mut self) -> Result<()>;
  fn action_range_literal(&mut self) -> Result<()>;
  fn action_range_literal_end(&mut self) -> Result<()>;
  fn action_range_literal_start(&mut self) -> Result<()>;
  fn action_range_type(&mut self) -> Result<()>;
  fn action_some(&mut self) -> Result<()>;
  fn action_some_begin(&mut self) -> Result<()>;
  fn action_subtraction(&mut self) -> Result<()>;
  fn action_type_name(&mut self) -> Result<()>;
  fn action_unary_tests_begin(&mut self) -> Result<()>;
  fn action_unary_tests_irrelevant(&mut self) -> Result<()>;
  fn action_unary_tests_negated(&mut self) -> Result<()>;
}

/// Calls requested reduce action.
pub fn reduce(reduce_actions: &mut impl ReduceActions, rule_number: i16) -> Result<()> {
  match rule_number {
    6 => reduce_actions.action_unary_tests_begin(),                           // $@1: %empty
    17 => reduce_actions.action_for_begin(),                                  // $@2: %empty
    18 => reduce_actions.action_for(),                                        // textual_expression: FOR $@2 iteration_contexts RETURN expression
    19 => reduce_actions.action_if(),                                         // textual_expression: IF expression THEN expression ELSE expression
    20 => reduce_actions.action_some_begin(),                                 // $@3: %empty
    21 => reduce_actions.action_some(),                                       // textual_expression: SOME $@3 quantified_expressions SATISFIES expression
    22 => reduce_actions.action_every_begin(),                                // $@4: %empty
    23 => reduce_actions.action_every(),                                      // textual_expression: EVERY $@4 quantified_expressions SATISFIES expression
    24 => reduce_actions.action_between_begin(),                              // $@5: %empty
    25 => reduce_actions.action_between(),                                    // textual_expression: expression BETWEEN $@5 expression BETWEEN_AND expression
    26 => reduce_actions.action_disjunction(),                                // textual_expression: expression OR expression
    27 => reduce_actions.action_conjunction(),                                // textual_expression: expression AND expression
    28 => reduce_actions.action_comparison_eq(),                              // textual_expression: expression EQ expression
    29 => reduce_actions.action_comparison_ne(),                              // textual_expression: expression NE expression
    30 => reduce_actions.action_comparison_lt(),                              // textual_expression: expression LT expression
    31 => reduce_actions.action_comparison_le(),                              // textual_expression: expression LE expression
    32 => reduce_actions.action_comparison_gt(),                              // textual_expression: expression GT expression
    33 => reduce_actions.action_comparison_ge(),                              // textual_expression: expression GE expression
    34 => reduce_actions.action_comparison_in(),                              // textual_expression: expression IN LEFT_PAREN comparison_in
    35 => reduce_actions.action_comparison_in(),                              // textual_expression: expression IN expression
    36 => reduce_actions.action_addition(),                                   // textual_expression: expression PLUS expression
    37 => reduce_actions.action_subtraction(),                                // textual_expression: expression MINUS expression
    38 => reduce_actions.action_multiplication(),                             // textual_expression: expression MUL expression
    39 => reduce_actions.action_division(),                                   // textual_expression: expression DIV expression
    40 => reduce_actions.action_exponentiation(),                             // textual_expression: expression EXP expression
    41 => reduce_actions.action_negation(),                                   // textual_expression: MINUS expression
    42 => reduce_actions.action_type_name(),                                  // $@6: %empty
    43 => reduce_actions.action_instance_of(),                                // textual_expression: expression INSTANCE OF $@6 type
    44 => reduce_actions.action_path(),                                       // textual_expression: expression DOT NAME
    45 => reduce_actions.action_filter(),                                     // textual_expression: expression LEFT_BRACKET expression RIGHT_BRACKET
    49 => reduce_actions.action_name(),                                       // textual_expression: NAME
    51 => reduce_actions.action_expression_list_tail(),                       // textual_expressions: textual_expression COMMA textual_expressions
    52 => reduce_actions.action_expression_list_tail(),                       // textual_expressions: textual_expression
    53 => reduce_actions.action_unary_tests_irrelevant(),                     // unary_tests: MINUS
    54 => reduce_actions.action_unary_tests_negated(),                        // unary_tests: NOT LEFT_PAREN positive_unary_tests RIGHT_PAREN
    56 => reduce_actions.action_expression_list_tail(),                       // positive_unary_tests: expression COMMA positive_unary_tests
    57 => reduce_actions.action_expression_list_tail(),                       // positive_unary_tests: expression
    58 => reduce_actions.action_expression_list_tail(),                       // comparison_in: expression COMMA positive_unary_tests RIGHT_PAREN
    59 => reduce_actions.action_addition(),                                   // simple_expression: expression PLUS expression
    60 => reduce_actions.action_subtraction(),                                // simple_expression: expression MINUS expression
    61 => reduce_actions.action_multiplication(),                             // simple_expression: expression MUL expression
    62 => reduce_actions.action_division(),                                   // simple_expression: expression DIV expression
    63 => reduce_actions.action_exponentiation(),                             // simple_expression: expression EXP expression
    64 => reduce_actions.action_negation(),                                   // simple_expression: MINUS expression
    66 => reduce_actions.action_expression_list_tail(),                       // simple_expressions: simple_expression COMMA simple_expressions
    67 => reduce_actions.action_expression_list_tail(),                       // simple_expressions: simple_expression
    68 => reduce_actions.action_comparison_unary_lt(),                        // simple_positive_unary_test: LT endpoint
    69 => reduce_actions.action_comparison_unary_le(),                        // simple_positive_unary_test: LE endpoint
    70 => reduce_actions.action_comparison_unary_gt(),                        // simple_positive_unary_test: GT endpoint
    71 => reduce_actions.action_comparison_unary_ge(),                        // simple_positive_unary_test: GE endpoint
    72 => reduce_actions.action_comparison_unary_eq(),                        // simple_positive_unary_test: EQ endpoint
    73 => reduce_actions.action_comparison_unary_ne(),                        // simple_positive_unary_test: NE endpoint
    75 => reduce_actions.action_interval(),                                   // interval: interval_start interval_end
    76 => reduce_actions.action_interval_start(),                             // interval_start: LEFT_PAREN endpoint ELLIPSIS
    77 => reduce_actions.action_interval_start(),                             // interval_start: RIGHT_BRACKET endpoint ELLIPSIS
    78 => reduce_actions.action_interval_start(),                             // interval_start: LEFT_BRACKET endpoint ELLIPSIS
    79 => reduce_actions.action_interval_end(),                               // interval_end: endpoint RIGHT_PAREN
    80 => reduce_actions.action_interval_end(),                               // interval_end: endpoint LEFT_BRACKET
    81 => reduce_actions.action_interval_end(),                               // interval_end: endpoint RIGHT_BRACKET
    86 => reduce_actions.action_literal_null(),                               // literal: NULL
    87 => reduce_actions.action_literal_numeric(),                            // simple_literal: NUMERIC
    88 => reduce_actions.action_literal_string(),                             // simple_literal: STRING
    89 => reduce_actions.action_literal_boolean(),                            // simple_literal: BOOLEAN
    90 => reduce_actions.action_literal_at(),                                 // simple_literal: AT STRING
    91 => reduce_actions.action_literal_date_time(),                          // $@7: %empty
    93 => reduce_actions.action_context_begin(),                              // $@8: %empty
    94 => reduce_actions.action_context_end(),                                // context: LEFT_BRACE $@8 context_entries
    95 => reduce_actions.action_empty_context(),                              // context_entries: RIGHT_BRACE
    96 => reduce_actions.action_context_entry_tail(),                         // context_entries: context_entry context_entry_tail
    97 => reduce_actions.action_context_entry(),                              // context_entry: key COLON expression
    99 => reduce_actions.action_context_entry_tail(),                         // context_entry_tail: COMMA context_entry context_entry_tail
    100 => reduce_actions.action_key_name(),                                  // key: NAME
    101 => reduce_actions.action_key_string(),                                // key: STRING
    102 => reduce_actions.action_list(),                                      // list: LEFT_BRACKET list_items
    103 => reduce_actions.action_list_empty(),                                // list_items: RIGHT_BRACKET
    104 => reduce_actions.action_list_tail(),                                 // list_items: expression list_tail
    106 => reduce_actions.action_list_tail(),                                 // list_tail: COMMA expression list_tail
    107 => reduce_actions.action_function_invocation_no_parameters(),         // parameters: RIGHT_PAREN
    108 => reduce_actions.action_function_invocation(),                       // parameters: named_parameters
    109 => reduce_actions.action_function_invocation(),                       // parameters: positional_parameters
    110 => reduce_actions.action_named_parameters_tail(),                     // named_parameters: named_parameter named_parameters_tail
    111 => reduce_actions.action_named_parameter(),                           // named_parameter: NAME COLON expression
    113 => reduce_actions.action_named_parameters_tail(),                     // named_parameters_tail: COMMA named_parameter named_parameters_tail
    114 => reduce_actions.action_positional_parameters_tail(),                // positional_parameters: expression positional_parameters_tail
    116 => reduce_actions.action_positional_parameters_tail(),                // positional_parameters_tail: COMMA expression positional_parameters_tail
    117 => reduce_actions.action_qualified_name_tail(),                       // qualified_name: NAME DOT qualified_name
    118 => reduce_actions.action_qualified_name(),                            // qualified_name: NAME
    119 => reduce_actions.action_built_in_type_name(),                        // type: BUILT_IN_TYPE_NAME
    121 => reduce_actions.action_type_name(),                                 // $@9: %empty
    122 => reduce_actions.action_list_type(),                                 // type: LIST LT $@9 type GT
    123 => reduce_actions.action_type_name(),                                 // $@10: %empty
    124 => reduce_actions.action_range_type(),                                // type: RANGE LT $@10 type GT
    126 => reduce_actions.action_type_name(),                                 // $@11: %empty
    127 => reduce_actions.action_function_type(),                             // type: FUNCTION LT function_type_parameters RIGHT_ARROW $@11 type
    128 => reduce_actions.action_context_type_entry_tail(),                   // context_type_entries: context_type_entry context_type_entry_tail
    129 => reduce_actions.action_type_name(),                                 // $@12: %empty
    130 => reduce_actions.action_context_type_entry(),                        // context_type_entry: NAME COLON $@12 type
    132 => reduce_actions.action_context_type_entry_tail(),                   // context_type_entry_tail: COMMA context_type_entry context_type_entry_tail
    133 => reduce_actions.action_function_type_parameters_empty(),            // function_type_parameters: GT
    134 => reduce_actions.action_type_name(),                                 // $@13: %empty
    135 => reduce_actions.action_function_type_parameters_tail(),             // function_type_parameters: $@13 type function_type_parameters_tail
    137 => reduce_actions.action_type_name(),                                 // $@14: %empty
    138 => reduce_actions.action_function_type_parameters_tail(),             // function_type_parameters_tail: COMMA $@14 type function_type_parameters_tail
    139 => reduce_actions.action_iteration_contexts_tail(),                   // iteration_contexts: iteration_context COMMA iteration_contexts
    140 => reduce_actions.action_iteration_contexts_tail(),                   // iteration_contexts: iteration_context
    141 => reduce_actions.action_iteration_context_variable_name_begin(),     // $@15: %empty
    142 => reduce_actions.action_iteration_context_variable_name(),           // $@16: %empty
    144 => reduce_actions.action_iteration_context_value_single(),            // iteration_context_value: expression
    145 => reduce_actions.action_iteration_context_value_range(),             // iteration_context_value: expression ELLIPSIS expression
    146 => reduce_actions.action_quantified_expressions_tail(),               // quantified_expressions: quantified_expression COMMA quantified_expressions
    147 => reduce_actions.action_quantified_expressions_tail(),               // quantified_expressions: quantified_expression
    148 => reduce_actions.action_quantified_expression_variable_name_begin(), // $@17: %empty
    149 => reduce_actions.action_quantified_expression_variable_name(),       // $@18: %empty
    150 => reduce_actions.action_quantified_expression(),                     // quantified_expression: $@17 NAME $@18 IN expression
    151 => reduce_actions.action_formal_parameters_begin(),                   // $@19: %empty
    152 => reduce_actions.action_function_definition(),                       // function_definition: FUNCTION LEFT_PAREN $@19 formal_parameters external
    153 => reduce_actions.action_formal_parameters_empty(),                   // formal_parameters: RIGHT_PAREN
    154 => reduce_actions.action_formal_parameters_first(),                   // $@20: %empty
    157 => reduce_actions.action_formal_parameters_tail(),                    // $@21: %empty
    159 => reduce_actions.action_type_name(),                                 // $@22: %empty
    160 => reduce_actions.action_formal_parameter_with_type(),                // formal_parameter: NAME COLON $@22 type
    161 => reduce_actions.action_formal_parameter_without_type(),             // formal_parameter: NAME
    162 => reduce_actions.action_function_body_external(),                    // external: EXTERNAL expression
    163 => reduce_actions.action_function_body(),                             // external: expression
    164 => reduce_actions.action_range_literal(),                             // range_literal: range_literal_start range_literal_end
    165 => reduce_actions.action_range_literal_start(),                       // range_literal_start: LEFT_PAREN range_endpoint ELLIPSIS
    166 => reduce_actions.action_range_literal_start(),                       // range_literal_start: RIGHT_BRACKET range_endpoint ELLIPSIS
    167 => reduce_actions.action_range_literal_start(),                       // range_literal_start: LEFT_BRACKET range_endpoint ELLIPSIS
    168 => reduce_actions.action_range_literal_end(),                         // range_literal_end: range_endpoint RIGHT_PAREN
    169 => reduce_actions.action_range_literal_end(),                         // range_literal_end: range_endpoint LEFT_BRACKET
    170 => reduce_actions.action_range_literal_end(),                         // range_literal_end: range_endpoint RIGHT_BRACKET
    171 => reduce_actions.action_literal_numeric(),                           // range_endpoint: NUMERIC
    172 => reduce_actions.action_literal_string(),                            // range_endpoint: STRING
    173 => reduce_actions.action_literal_date_time(),                         // $@23: %empty
    _ => Ok(()),
  }
}
