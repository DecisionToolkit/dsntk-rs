//! # Parsing tables
//!
//! Parsing tables extracted from files generated by `Bison` for `C` language.
//! This file was generated by dedicated tool, do not modify it manually.

use dsntk_common::Result;

/// Types of tokens returned by lexer.
#[derive(Clone)]
pub enum TokenType {
  YyEmpty = -2,
  YyEof = 0,
  YyError = 256,
  YyUndef = 257,
  StartExpression = 258,
  StartBoxedExpression = 259,
  StartContext = 260,
  StartTextualExpression = 261,
  StartTextualExpressions = 262,
  StartUnaryTests = 263,
  StartSimpleExpression = 264,
  StartSimpleExpressions = 265,
  StartSimpleValue = 266,
  StartRangeLiteral = 267,
  At = 268,
  Not = 269,
  Colon = 270,
  Comma = 271,
  Every = 272,
  For = 273,
  LeftBrace = 274,
  Null = 275,
  RightArrow = 276,
  Of = 277,
  List = 278,
  Range = 279,
  Context = 280,
  Then = 281,
  Function = 282,
  External = 283,
  If = 284,
  RightBrace = 285,
  Return = 286,
  Some = 287,
  Numeric = 288,
  String = 289,
  Boolean = 290,
  Satisfies = 291,
  Else = 292,
  Or = 293,
  And = 294,
  Eq = 295,
  Ne = 296,
  Lt = 297,
  Le = 298,
  Gt = 299,
  Ge = 300,
  Between = 301,
  BetweenAnd = 302,
  In = 303,
  Minus = 304,
  Plus = 305,
  Mul = 306,
  Div = 307,
  Exp = 308,
  Instance = 310,
  Name = 311,
  NameDateTime = 312,
  BuiltInTypeName = 313,
  LeftParen = 314,
  RightParen = 315,
  LeftBracket = 316,
  RightBracket = 317,
  Ellipsis = 318,
  Dot = 319,
}

/// Kinds of symbols recognized by parser.
#[allow(clippy::enum_variant_names)]
pub enum SymbolKind {
  YyEmpty = -2,
  YyEof = 0,
  YyError = 1,
  YyUndef = 2,
  YyAccept = 65,
}

///
pub const YY_PACT_N_INF: i16 = -260;

///
pub const YY_TABLE_N_INF: i16 = -120;

///
pub const YY_FINAL: usize = 71;

///
pub const YY_LAST: i16 = 1060;

///
pub const YY_N_TOKENS: usize = 65;

/// `YY_TRANSLATE[TOKEN-NUM]` - symbol number corresponding to TOKEN-NUM as returned by lexer.
pub const YY_TRANSLATE: [i8; 320] = [
  0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
];

/// `YY_PACT[STATE-NUM]` - index in YY_TABLE of the portion describing STATE-NUM.
pub const YY_PACT: [i16; 329] = [
  1048, 391, 3, 4, 391, 391, -260, 438, 438, 130, 53, 29, 7, -260, -260, -260, -260, 2, 391, -260, -260, -260, -260, 391, 391, 391, 391, 391, 391, 391, -260, 25, 391, 485, 391,
  866, -260, -260, -260, -260, 391, -260, -260, -260, -260, -260, 485, -260, -260, 866, 65, 59, -260, 247, 391, 18, 893, -260, -260, 73, -260, 75, -260, 28, -260, -260, 5, 5, 5,
  -260, 5, -260, -260, -260, -260, 10, -260, 703, -260, 58, -260, -260, -260, -260, -260, -260, 173, -260, 758, 60, 704, 562, 77, -260, 81, 391, 391, 391, 391, 391, 391, 391, 391,
  -260, 532, 391, 391, 391, 391, 391, 127, 294, 391, 99, -260, 106, 562, 391, 102, 391, 655, -260, -260, 119, 121, 391, 391, 391, 391, 391, 438, -260, -260, 117, 122, 131, 132,
  -260, 128, 146, 177, 140, 174, 188, 152, -260, -260, -260, -260, 104, 197, 61, 391, 178, 294, -260, -260, 391, -260, -260, -260, -260, 919, 944, 969, 969, 969, 969, 969, 969,
  391, 391, 986, 120, 120, 156, 156, 173, -260, 198, -260, 593, -260, -260, 8, -260, 785, -260, -260, -260, -260, -260, 391, 391, -260, 19, 86, 26, 93, 142, -260, -260, -260,
  -260, -260, -260, -260, -260, 391, -260, -260, 391, -260, -260, 20, -260, -260, 391, 203, -260, 344, -260, 731, 391, -260, 562, 812, 624, -260, 175, 391, 391, -260, -260, 165,
  -260, -260, -260, 163, -260, 294, 866, -260, 176, 866, -260, 179, 104, 866, -260, 391, 866, -260, 9, 391, 866, -260, 391, 391, 183, 184, 193, 194, -260, -260, -260, 866, 593,
  198, 8, -260, -260, 391, 391, -260, 175, 866, 182, -260, -260, 866, 986, 180, -260, -260, 185, 199, -260, -260, 866, 839, -260, -260, -260, -260, 175, 175, 227, -260, -11, -260,
  223, 175, 391, 9, 201, 202, -260, 185, -260, -260, -260, 11, 866, -260, -260, -260, 175, -11, 175, -260, -260, -260, -260, -260, -260, 175, 11, -260,
];

/// `YY_DEF_ACT[STATE-NUM]` - default reduction number in state STATE-NUM.
/// Performed when YY_TABLE does not specify something else to do.
/// Zero means the default is an error.
pub const YY_DEF_ACT: [u8; 329] = [
  0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 23, 18, 94, 87, 0, 0, 21, 88, 89, 90, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 2, 13, 14, 49, 75, 0, 48, 86, 17, 15, 16, 0, 3, 4, 0, 14, 14,
  6, 0, 0, 50, 0, 9, 66, 86, 84, 68, 10, 119, 11, 85, 0, 0, 0, 12, 0, 1, 91, 149, 142, 0, 152, 0, 149, 83, 73, 74, 69, 70, 71, 72, 42, 92, 83, 0, 104, 83, 0, 103, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 54, 58, 8, 56, 42, 0, 0, 0, 0, 0, 0, 0, 172, 173, 0, 0, 0, 0, 165, 0, 0, 148, 0, 0, 141, 0, 96, 102, 101, 95, 0, 0,
  0, 0, 0, 0, 51, 77, 0, 106, 105, 79, 78, 27, 28, 29, 30, 31, 32, 33, 34, 0, 0, 36, 38, 37, 39, 40, 41, 43, 50, 108, 0, 47, 109, 0, 110, 0, 45, 80, 81, 82, 52, 0, 0, 118, 38, 37,
  39, 40, 41, 67, 174, 166, 168, 167, 169, 170, 171, 0, 149, 150, 0, 142, 143, 0, 99, 97, 0, 162, 154, 0, 155, 0, 0, 93, 0, 0, 83, 35, 0, 0, 0, 116, 115, 0, 113, 111, 46, 0, 57,
  0, 24, 147, 0, 19, 140, 0, 0, 98, 160, 0, 164, 153, 0, 0, 22, 107, 0, 0, 0, 0, 0, 0, 120, 121, 44, 112, 0, 0, 0, 55, 175, 0, 0, 100, 0, 163, 0, 157, 156, 20, 26, 0, 122, 124, 0,
  135, 117, 114, 151, 145, 144, 161, 158, 59, 0, 0, 0, 126, 0, 134, 0, 0, 0, 0, 0, 0, 130, 0, 132, 129, 127, 0, 146, 159, 123, 125, 0, 0, 0, 138, 137, 136, 131, 133, 128, 0, 0,
  139,
];

/// `YY_P_GOTO[NTERM-NUM]`
pub const YY_P_GOTO: [i16; 77] = [
  -260, -260, -260, -1, 245, 16, -260, -260, -260, -260, -260, 133, -260, -181, -260, 241, 124, -260, -260, -260, -260, 23, 242, -260, 1, -260, 249, -260, -260, 41, 12, -260,
  -260, -260, 33, -152, -260, 34, -7, -260, -4, 6, -259, -260, -260, -260, -260, -39, -260, -48, -260, -260, -54, -260, 63, -260, -260, -260, -260, -77, -260, -260, -260, -260,
  -260, -260, -260, -27, -260, 17, -260, -260, -260, -260, -260, 92, -260,
];

/// `YY_DEF_GOTO[NTERM-NUM]`
pub const YY_DEF_GOTO: [i16; 77] = [
  0, 11, 53, 79, 36, 37, 74, 78, 73, 170, 229, 52, 121, 122, 228, 61, 62, 38, 39, 40, 114, 89, 58, 41, 42, 154, 43, 75, 148, 149, 216, 150, 44, 93, 159, 182, 183, 184, 236, 185,
  233, 264, 265, 295, 296, 319, 298, 299, 317, 310, 301, 302, 322, 326, 142, 143, 144, 246, 291, 139, 140, 141, 243, 45, 151, 220, 253, 279, 304, 221, 275, 252, 69, 70, 137, 134,
  240,
];

/// `YY_TABLE[YY_PACT[STATE-NUM]]` - what to do in state STATE-NUM.
/// If positive, shift that token.
/// If negative, reduce the rule whose number is the opposite.
/// If `YY_TABLE_N_INF`, syntax error.
pub const YY_TABLE: [i16; 1061] = [
  35, 153, 224, 49, 49, 308, 56, 56, 59, 59, 65, 238, 239, 60, 60, 60, 292, 77, -119, -61, 50, 51, 15, 15, 234, 277, -62, 320, 86, 71, 17, 88, 91, 309, -119, -61, 305, 306, 131,
  132, 145, 72, -62, 312, 146, 116, 80, 81, 82, 83, 84, 85, 120, 123, 146, 321, 92, 94, 323, -53, 325, 76, 133, 115, 46, -5, 147, 327, 235, 278, 107, 108, 109, -85, 110, 117, 147,
  282, 111, 109, 112, 110, 124, 113, 87, 111, -60, 112, 271, -85, 113, 130, 124, -63, 162, 163, 164, 165, 166, 167, 168, 169, -60, 172, 173, 174, 175, 176, 177, -63, 181, 186, 66,
  94, 67, 68, 49, 218, 86, -65, 214, 219, 113, 156, 195, 196, 197, 198, 199, 56, 194, 59, 242, 51, 215, -65, 60, 107, 108, 109, 160, 110, -64, 12, 161, 111, 109, 112, 110, 178,
  113, 222, 111, 181, 112, 187, 225, 113, -64, 135, 136, 192, 138, 20, 21, 22, 188, 189, 190, 226, 227, 107, 108, 109, 110, 110, 201, 63, 111, 111, 112, 112, 208, 113, 113, 202,
  63, 31, 205, 206, 207, 120, 120, 209, 203, 204, 210, 110, 259, 260, 261, 111, 262, 112, 212, 211, 113, 241, 213, 109, 244, 110, 217, 230, 223, 111, 248, 112, 249, 251, 113, 268,
  255, 270, 272, 283, 284, 273, 110, 266, 267, 63, 111, 263, 112, 285, 286, 113, 218, 181, 294, 297, 307, 300, 311, 315, 316, 47, 57, 276, 191, 64, 48, 280, 200, 247, 281, 120,
  256, 274, 12, 118, 288, 287, 13, 14, 15, 16, 269, 318, 324, 289, 290, 328, 17, 245, 18, 314, 0, 19, 20, 21, 22, 0, 0, 0, 0, 23, 24, 25, 26, 27, 28, 0, 293, 0, 119, 0, 0, 0, 0,
  0, 313, 30, 31, 0, 32, 12, 33, 34, 0, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 23, 24, 25, 26, 27, 28, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 179,
  31, 0, 32, 180, 33, 34, 12, 0, 0, 0, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 17, 250, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 23, 24, 25, 26, 27, 28, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 30,
  31, 0, 32, 12, 33, 34, 0, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 23, 24, 25, 26, 27, 28, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 30, 31, 0, 32,
  12, 33, 34, 0, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 23, 24, 25, 26, 27, 28, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 55, 31, 0, 32, 12, 33, 34,
  0, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 23, 24, 25, 26, 27, 28, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 30, 31, 0, 32, 12, 33, 90, 0, 13, 14,
  15, 16, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 0, 0, 0, 23, 24, 25, 26, 27, 28, 157, 0, 0, 29, 0, 0, 0, 0, 0, 0, 30, 31, 0, 171, 0, 33, 34, 0, 0, 0, 0, 0, 95, 96,
  97, 98, 99, 100, 101, 102, 103, 231, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 0, 112, 158, 0, 113, 0, 0, 0, 0, 95, 96, 97, 98, 99, 100, 101, 102, 103, 258, 104, 105,
  106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 232, 112, 0, 0, 113, 0, 0, 0, 0, 95, 96, 97, 98, 99, 100, 101, 102, 103, 193, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 155,
  112, 0, 0, 113, 0, 0, 0, 0, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 0, 112, 12, 0, 113, 0, 13, 14, 15, 16, 0, 0, 0, 0,
  152, 0, 17, 0, 18, 0, 0, 19, 20, 21, 22, 0, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107, 108, 109, 0, 110, 0, 30, 31, 111, 0, 112, 0, 0, 113, 254, 95, 96, 97,
  98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 0, 112, 0, 0, 113, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107, 108, 109, 0,
  110, 0, 0, 0, 111, 155, 112, 0, 0, 113, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 0, 112, 237, 0, 113, 95, 96, 97, 98, 99,
  100, 101, 102, 103, 257, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 0, 112, 0, 0, 113, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107, 108, 109, 0, 110,
  0, 0, 0, 111, 0, 112, 0, 303, 113, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 0, 112, 0, 0, 113, 95, 96, 97, 98, 99, 100,
  101, 102, 103, 0, 104, 125, 126, 127, 128, 129, 0, 110, 0, 0, 0, 111, 0, 112, 0, 0, 113, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0,
  111, 0, 112, 0, 0, 113, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 0, 112, 0, 0, 113, -120, -120, -120, -120, -120, -120, 103, 0,
  104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 0, 112, 0, 0, 113, 104, 105, 106, 107, 108, 109, 0, 110, 0, 0, 0, 111, 0, 112, 0, 0, 113, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
];

/// ???
pub const YY_CHECK: [i16; 1061] = [
  1, 78, 154, 4, 5, 16, 7, 8, 7, 8, 9, 192, 193, 7, 8, 9, 275, 18, 0, 0, 4, 5, 19, 19, 16, 16, 0, 16, 29, 0, 27, 32, 33, 44, 16, 16, 295, 296, 33, 34, 30, 34, 16, 302, 34, 46, 23,
  24, 25, 26, 27, 28, 53, 54, 34, 44, 33, 34, 317, 0, 319, 59, 57, 40, 61, 0, 56, 326, 60, 60, 51, 52, 53, 0, 55, 16, 56, 258, 59, 53, 61, 55, 64, 64, 59, 59, 0, 61, 240, 16, 64,
  16, 64, 0, 95, 96, 97, 98, 99, 100, 101, 102, 16, 104, 105, 106, 107, 108, 109, 16, 111, 112, 59, 90, 61, 62, 117, 56, 119, 0, 16, 60, 64, 63, 125, 126, 127, 128, 129, 130, 124,
  130, 209, 117, 30, 16, 130, 51, 52, 53, 63, 55, 0, 13, 63, 59, 53, 61, 55, 22, 64, 152, 59, 154, 61, 56, 157, 64, 16, 67, 68, 59, 70, 33, 34, 35, 60, 61, 62, 170, 171, 51, 52,
  53, 55, 55, 59, 56, 59, 59, 61, 61, 36, 64, 64, 63, 56, 57, 60, 61, 62, 192, 193, 16, 63, 63, 56, 55, 23, 24, 25, 59, 27, 61, 16, 31, 64, 208, 56, 53, 211, 55, 15, 15, 36, 59,
  217, 61, 15, 220, 64, 56, 223, 60, 48, 42, 42, 48, 55, 230, 231, 56, 59, 58, 61, 42, 42, 64, 56, 240, 60, 56, 15, 44, 21, 44, 44, 2, 7, 250, 117, 9, 3, 254, 130, 214, 257, 258,
  225, 247, 13, 14, 269, 267, 17, 18, 19, 20, 234, 308, 318, 272, 273, 327, 27, 212, 29, 304, -1, 32, 33, 34, 35, -1, -1, -1, -1, 40, 41, 42, 43, 44, 45, -1, 277, -1, 49, -1, -1,
  -1, -1, -1, 303, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1, -1, 32, 33, 34, 35, -1, -1, -1, -1, 40, 41, 42, 43, 44, 45, -1, -1, -1,
  49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, 60, 61, 62, 13, -1, -1, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, 28, 29, -1, -1, 32, 33, 34, 35, -1, -1, -1, -1, 40, 41, 42,
  43, 44, 45, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1, -1, 32, 33, 34, 35, -1, -1, -1, -1,
  40, 41, 42, 43, 44, 45, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1, -1, 32, 33, 34, 35, -1,
  -1, -1, -1, 40, 41, 42, 43, 44, 45, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1, -1, 32, 33,
  34, 35, -1, -1, -1, -1, 40, 41, 42, 43, 44, 45, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, 13, 61, 62, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, 27, -1, 29, -1,
  -1, 32, 33, 34, 35, -1, -1, -1, -1, 40, 41, 42, 43, 44, 45, 16, -1, -1, 49, -1, -1, -1, -1, -1, -1, 56, 57, -1, 59, -1, 61, 62, -1, -1, -1, -1, -1, 38, 39, 40, 41, 42, 43, 44,
  45, 46, 16, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, 62, -1, 64, -1, -1, -1, -1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 16, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1,
  -1, 59, 60, 61, -1, -1, 64, -1, -1, -1, -1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 16, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, 60, 61, -1, -1, 64, -1, -1, -1, -1, 38, 39,
  40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, 13, -1, 64, -1, 17, 18, 19, 20, -1, -1, -1, -1, 26, -1, 27, -1, 29, -1, -1, 32, 33, 34,
  35, -1, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, 56, 57, 59, -1, 61, -1, -1, 64, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51,
  52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, 60, 61, -1, -1, 64, 38, 39, 40, 41,
  42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, 62, -1, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1,
  59, -1, 61, -1, -1, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, 63, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48,
  49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 39,
  40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1,
  59, -1, 61, -1, -1, 64, 40, 41, 42, 43, 44, 45, 46, -1, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1, 61, -1, -1, 64, 48, 49, 50, 51, 52, 53, -1, 55, -1, -1, -1, 59, -1,
  61, -1, -1, 64, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
];

/// `YY_R1[YYN]` - symbol number of symbol that rule YYN derives.
pub const YY_R1: [u8; 176] = [
  0, 65, 66, 66, 66, 66, 66, 67, 66, 66, 66, 66, 66, 68, 68, 69, 69, 69, 71, 70, 70, 72, 70, 73, 70, 74, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 75,
  70, 70, 70, 70, 70, 70, 70, 70, 76, 76, 77, 77, 77, 78, 78, 79, 80, 80, 80, 80, 80, 80, 80, 81, 81, 82, 82, 82, 82, 82, 82, 82, 83, 84, 84, 84, 85, 85, 85, 86, 87, 87, 88, 88,
  89, 89, 89, 89, 90, 89, 92, 91, 93, 93, 94, 95, 95, 96, 96, 97, 98, 98, 99, 99, 100, 100, 100, 101, 102, 103, 103, 104, 105, 105, 106, 106, 107, 107, 108, 107, 109, 107, 107,
  110, 107, 111, 113, 112, 114, 114, 115, 116, 115, 117, 118, 117, 119, 119, 121, 122, 120, 123, 123, 124, 124, 126, 127, 125, 129, 128, 130, 131, 130, 132, 133, 132, 135, 134,
  134, 136, 136, 137, 138, 138, 138, 139, 139, 139, 140, 140, 141, 140,
];

/// `YY_R2[YYN]` - number of symbols on the right hand side of rule YYN.
pub const YY_R2: [i8; 176] = [
  0, 2, 2, 2, 2, 2, 2, 0, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 5, 6, 0, 5, 0, 5, 0, 6, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 2, 0, 5, 3, 4, 3, 1, 1, 1, 3, 3, 1, 1, 4, 1, 3, 1,
  4, 3, 3, 3, 3, 3, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 1, 2, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 4, 0, 3, 1, 2, 3, 1, 3, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 2, 3, 1, 3, 2, 1, 3,
  3, 1, 1, 1, 0, 5, 0, 5, 3, 0, 6, 2, 0, 4, 1, 3, 1, 0, 3, 1, 0, 4, 3, 1, 0, 0, 5, 1, 3, 3, 1, 0, 0, 5, 0, 5, 1, 0, 3, 1, 0, 4, 0, 4, 1, 2, 1, 2, 3, 3, 3, 2, 2, 2, 1, 1, 0, 4,
];

///Trait for reduce action definitions.
pub trait ReduceActions {
  fn action_addition(&mut self) -> Result<()>;
  fn action_between(&mut self) -> Result<()>;
  fn action_between_begin(&mut self) -> Result<()>;
  fn action_built_in_type_name(&mut self) -> Result<()>;
  fn action_comparison_eq(&mut self) -> Result<()>;
  fn action_comparison_ge(&mut self) -> Result<()>;
  fn action_comparison_gt(&mut self) -> Result<()>;
  fn action_comparison_in(&mut self) -> Result<()>;
  fn action_comparison_le(&mut self) -> Result<()>;
  fn action_comparison_lt(&mut self) -> Result<()>;
  fn action_comparison_ne(&mut self) -> Result<()>;
  fn action_comparison_unary_eq(&mut self) -> Result<()>;
  fn action_comparison_unary_ge(&mut self) -> Result<()>;
  fn action_comparison_unary_gt(&mut self) -> Result<()>;
  fn action_comparison_unary_le(&mut self) -> Result<()>;
  fn action_comparison_unary_lt(&mut self) -> Result<()>;
  fn action_comparison_unary_ne(&mut self) -> Result<()>;
  fn action_conjunction(&mut self) -> Result<()>;
  fn action_context_begin(&mut self) -> Result<()>;
  fn action_context_end(&mut self) -> Result<()>;
  fn action_context_entry(&mut self) -> Result<()>;
  fn action_context_entry_tail(&mut self) -> Result<()>;
  fn action_context_type_entry(&mut self) -> Result<()>;
  fn action_context_type_entry_tail(&mut self) -> Result<()>;
  fn action_disjunction(&mut self) -> Result<()>;
  fn action_division(&mut self) -> Result<()>;
  fn action_empty_context(&mut self) -> Result<()>;
  fn action_every(&mut self) -> Result<()>;
  fn action_every_begin(&mut self) -> Result<()>;
  fn action_exponentiation(&mut self) -> Result<()>;
  fn action_expression_list_tail(&mut self) -> Result<()>;
  fn action_filter(&mut self) -> Result<()>;
  fn action_for(&mut self) -> Result<()>;
  fn action_for_begin(&mut self) -> Result<()>;
  fn action_formal_parameter_with_type(&mut self) -> Result<()>;
  fn action_formal_parameter_without_type(&mut self) -> Result<()>;
  fn action_formal_parameters_begin(&mut self) -> Result<()>;
  fn action_formal_parameters_empty(&mut self) -> Result<()>;
  fn action_formal_parameters_first(&mut self) -> Result<()>;
  fn action_formal_parameters_tail(&mut self) -> Result<()>;
  fn action_function_body(&mut self) -> Result<()>;
  fn action_function_body_external(&mut self) -> Result<()>;
  fn action_function_definition(&mut self) -> Result<()>;
  fn action_function_invocation(&mut self) -> Result<()>;
  fn action_function_invocation_no_parameters(&mut self) -> Result<()>;
  fn action_function_type(&mut self) -> Result<()>;
  fn action_function_type_parameters_empty(&mut self) -> Result<()>;
  fn action_function_type_parameters_tail(&mut self) -> Result<()>;
  fn action_if(&mut self) -> Result<()>;
  fn action_instance_of(&mut self) -> Result<()>;
  fn action_interval(&mut self) -> Result<()>;
  fn action_interval_end(&mut self) -> Result<()>;
  fn action_interval_start(&mut self) -> Result<()>;
  fn action_iteration_context_value_range(&mut self) -> Result<()>;
  fn action_iteration_context_value_single(&mut self) -> Result<()>;
  fn action_iteration_context_variable_name(&mut self) -> Result<()>;
  fn action_iteration_context_variable_name_begin(&mut self) -> Result<()>;
  fn action_iteration_contexts_tail(&mut self) -> Result<()>;
  fn action_key_name(&mut self) -> Result<()>;
  fn action_key_string(&mut self) -> Result<()>;
  fn action_list(&mut self) -> Result<()>;
  fn action_list_empty(&mut self) -> Result<()>;
  fn action_list_tail(&mut self) -> Result<()>;
  fn action_list_type(&mut self) -> Result<()>;
  fn action_literal_at(&mut self) -> Result<()>;
  fn action_literal_boolean(&mut self) -> Result<()>;
  fn action_literal_date_time(&mut self) -> Result<()>;
  fn action_literal_null(&mut self) -> Result<()>;
  fn action_literal_numeric(&mut self) -> Result<()>;
  fn action_literal_string(&mut self) -> Result<()>;
  fn action_multiplication(&mut self) -> Result<()>;
  fn action_name(&mut self) -> Result<()>;
  fn action_named_parameter(&mut self) -> Result<()>;
  fn action_named_parameters_tail(&mut self) -> Result<()>;
  fn action_negation(&mut self) -> Result<()>;
  fn action_path(&mut self) -> Result<()>;
  fn action_positional_parameters_tail(&mut self) -> Result<()>;
  fn action_qualified_name(&mut self) -> Result<()>;
  fn action_qualified_name_tail(&mut self) -> Result<()>;
  fn action_quantified_expression(&mut self) -> Result<()>;
  fn action_quantified_expression_variable_name(&mut self) -> Result<()>;
  fn action_quantified_expression_variable_name_begin(&mut self) -> Result<()>;
  fn action_quantified_expressions_tail(&mut self) -> Result<()>;
  fn action_range_literal(&mut self) -> Result<()>;
  fn action_range_literal_end(&mut self) -> Result<()>;
  fn action_range_literal_start(&mut self) -> Result<()>;
  fn action_range_type(&mut self) -> Result<()>;
  fn action_some(&mut self) -> Result<()>;
  fn action_some_begin(&mut self) -> Result<()>;
  fn action_subtraction(&mut self) -> Result<()>;
  fn action_type_name(&mut self) -> Result<()>;
  fn action_unary_tests_begin(&mut self) -> Result<()>;
  fn action_unary_tests_irrelevant(&mut self) -> Result<()>;
  fn action_unary_tests_negated(&mut self) -> Result<()>;
}

/// Calls requested reduce action.
pub fn reduce(reduce_actions: &mut impl ReduceActions, rule_number: i16) -> Result<()> {
  match rule_number {
    7 => reduce_actions.action_unary_tests_begin(),                           // $@1: %empty
    18 => reduce_actions.action_for_begin(),                                  // $@2: %empty
    19 => reduce_actions.action_for(),                                        // textual_expression: FOR $@2 iteration_contexts RETURN expression
    20 => reduce_actions.action_if(),                                         // textual_expression: IF expression THEN expression ELSE expression
    21 => reduce_actions.action_some_begin(),                                 // $@3: %empty
    22 => reduce_actions.action_some(),                                       // textual_expression: SOME $@3 quantified_expressions SATISFIES expression
    23 => reduce_actions.action_every_begin(),                                // $@4: %empty
    24 => reduce_actions.action_every(),                                      // textual_expression: EVERY $@4 quantified_expressions SATISFIES expression
    25 => reduce_actions.action_between_begin(),                              // $@5: %empty
    26 => reduce_actions.action_between(),                                    // textual_expression: expression BETWEEN $@5 expression BETWEEN_AND expression
    27 => reduce_actions.action_disjunction(),                                // textual_expression: expression OR expression
    28 => reduce_actions.action_conjunction(),                                // textual_expression: expression AND expression
    29 => reduce_actions.action_comparison_eq(),                              // textual_expression: expression EQ expression
    30 => reduce_actions.action_comparison_ne(),                              // textual_expression: expression NE expression
    31 => reduce_actions.action_comparison_lt(),                              // textual_expression: expression LT expression
    32 => reduce_actions.action_comparison_le(),                              // textual_expression: expression LE expression
    33 => reduce_actions.action_comparison_gt(),                              // textual_expression: expression GT expression
    34 => reduce_actions.action_comparison_ge(),                              // textual_expression: expression GE expression
    35 => reduce_actions.action_comparison_in(),                              // textual_expression: expression IN LEFT_PAREN comparison_in
    36 => reduce_actions.action_comparison_in(),                              // textual_expression: expression IN expression
    37 => reduce_actions.action_addition(),                                   // textual_expression: expression PLUS expression
    38 => reduce_actions.action_subtraction(),                                // textual_expression: expression MINUS expression
    39 => reduce_actions.action_multiplication(),                             // textual_expression: expression MUL expression
    40 => reduce_actions.action_division(),                                   // textual_expression: expression DIV expression
    41 => reduce_actions.action_exponentiation(),                             // textual_expression: expression EXP expression
    42 => reduce_actions.action_negation(),                                   // textual_expression: MINUS expression
    43 => reduce_actions.action_type_name(),                                  // $@6: %empty
    44 => reduce_actions.action_instance_of(),                                // textual_expression: expression INSTANCE OF $@6 type
    45 => reduce_actions.action_path(),                                       // textual_expression: expression DOT NAME
    46 => reduce_actions.action_filter(),                                     // textual_expression: expression LEFT_BRACKET expression RIGHT_BRACKET
    50 => reduce_actions.action_name(),                                       // textual_expression: NAME
    52 => reduce_actions.action_expression_list_tail(),                       // textual_expressions: textual_expression COMMA textual_expressions
    53 => reduce_actions.action_expression_list_tail(),                       // textual_expressions: textual_expression
    54 => reduce_actions.action_unary_tests_irrelevant(),                     // unary_tests: MINUS
    55 => reduce_actions.action_unary_tests_negated(),                        // unary_tests: NOT LEFT_PAREN positive_unary_tests RIGHT_PAREN
    57 => reduce_actions.action_expression_list_tail(),                       // positive_unary_tests: expression COMMA positive_unary_tests
    58 => reduce_actions.action_expression_list_tail(),                       // positive_unary_tests: expression
    59 => reduce_actions.action_expression_list_tail(),                       // comparison_in: expression COMMA positive_unary_tests RIGHT_PAREN
    60 => reduce_actions.action_addition(),                                   // simple_expression: expression PLUS expression
    61 => reduce_actions.action_subtraction(),                                // simple_expression: expression MINUS expression
    62 => reduce_actions.action_multiplication(),                             // simple_expression: expression MUL expression
    63 => reduce_actions.action_division(),                                   // simple_expression: expression DIV expression
    64 => reduce_actions.action_exponentiation(),                             // simple_expression: expression EXP expression
    65 => reduce_actions.action_negation(),                                   // simple_expression: MINUS expression
    67 => reduce_actions.action_expression_list_tail(),                       // simple_expressions: simple_expression COMMA simple_expressions
    68 => reduce_actions.action_expression_list_tail(),                       // simple_expressions: simple_expression
    69 => reduce_actions.action_comparison_unary_lt(),                        // simple_positive_unary_test: LT endpoint
    70 => reduce_actions.action_comparison_unary_le(),                        // simple_positive_unary_test: LE endpoint
    71 => reduce_actions.action_comparison_unary_gt(),                        // simple_positive_unary_test: GT endpoint
    72 => reduce_actions.action_comparison_unary_ge(),                        // simple_positive_unary_test: GE endpoint
    73 => reduce_actions.action_comparison_unary_eq(),                        // simple_positive_unary_test: EQ endpoint
    74 => reduce_actions.action_comparison_unary_ne(),                        // simple_positive_unary_test: NE endpoint
    76 => reduce_actions.action_interval(),                                   // interval: interval_start interval_end
    77 => reduce_actions.action_interval_start(),                             // interval_start: LEFT_PAREN endpoint ELLIPSIS
    78 => reduce_actions.action_interval_start(),                             // interval_start: RIGHT_BRACKET endpoint ELLIPSIS
    79 => reduce_actions.action_interval_start(),                             // interval_start: LEFT_BRACKET endpoint ELLIPSIS
    80 => reduce_actions.action_interval_end(),                               // interval_end: endpoint RIGHT_PAREN
    81 => reduce_actions.action_interval_end(),                               // interval_end: endpoint LEFT_BRACKET
    82 => reduce_actions.action_interval_end(),                               // interval_end: endpoint RIGHT_BRACKET
    87 => reduce_actions.action_literal_null(),                               // literal: NULL
    88 => reduce_actions.action_literal_numeric(),                            // simple_literal: NUMERIC
    89 => reduce_actions.action_literal_string(),                             // simple_literal: STRING
    90 => reduce_actions.action_literal_boolean(),                            // simple_literal: BOOLEAN
    91 => reduce_actions.action_literal_at(),                                 // simple_literal: AT STRING
    92 => reduce_actions.action_literal_date_time(),                          // $@7: %empty
    94 => reduce_actions.action_context_begin(),                              // $@8: %empty
    95 => reduce_actions.action_context_end(),                                // context: LEFT_BRACE $@8 context_entries
    96 => reduce_actions.action_empty_context(),                              // context_entries: RIGHT_BRACE
    97 => reduce_actions.action_context_entry_tail(),                         // context_entries: context_entry context_entry_tail
    98 => reduce_actions.action_context_entry(),                              // context_entry: key COLON expression
    100 => reduce_actions.action_context_entry_tail(),                        // context_entry_tail: COMMA context_entry context_entry_tail
    101 => reduce_actions.action_key_name(),                                  // key: NAME
    102 => reduce_actions.action_key_string(),                                // key: STRING
    103 => reduce_actions.action_list(),                                      // list: LEFT_BRACKET list_items
    104 => reduce_actions.action_list_empty(),                                // list_items: RIGHT_BRACKET
    105 => reduce_actions.action_list_tail(),                                 // list_items: expression list_tail
    107 => reduce_actions.action_list_tail(),                                 // list_tail: COMMA expression list_tail
    108 => reduce_actions.action_function_invocation_no_parameters(),         // parameters: RIGHT_PAREN
    109 => reduce_actions.action_function_invocation(),                       // parameters: named_parameters
    110 => reduce_actions.action_function_invocation(),                       // parameters: positional_parameters
    111 => reduce_actions.action_named_parameters_tail(),                     // named_parameters: named_parameter named_parameters_tail
    112 => reduce_actions.action_named_parameter(),                           // named_parameter: NAME COLON expression
    114 => reduce_actions.action_named_parameters_tail(),                     // named_parameters_tail: COMMA named_parameter named_parameters_tail
    115 => reduce_actions.action_positional_parameters_tail(),                // positional_parameters: expression positional_parameters_tail
    117 => reduce_actions.action_positional_parameters_tail(),                // positional_parameters_tail: COMMA expression positional_parameters_tail
    118 => reduce_actions.action_qualified_name_tail(),                       // qualified_name: NAME DOT qualified_name
    119 => reduce_actions.action_qualified_name(),                            // qualified_name: NAME
    120 => reduce_actions.action_built_in_type_name(),                        // type: BUILT_IN_TYPE_NAME
    122 => reduce_actions.action_type_name(),                                 // $@9: %empty
    123 => reduce_actions.action_list_type(),                                 // type: LIST LT $@9 type GT
    124 => reduce_actions.action_type_name(),                                 // $@10: %empty
    125 => reduce_actions.action_range_type(),                                // type: RANGE LT $@10 type GT
    127 => reduce_actions.action_type_name(),                                 // $@11: %empty
    128 => reduce_actions.action_function_type(),                             // type: FUNCTION LT function_type_parameters RIGHT_ARROW $@11 type
    129 => reduce_actions.action_context_type_entry_tail(),                   // context_type_entries: context_type_entry context_type_entry_tail
    130 => reduce_actions.action_type_name(),                                 // $@12: %empty
    131 => reduce_actions.action_context_type_entry(),                        // context_type_entry: NAME COLON $@12 type
    133 => reduce_actions.action_context_type_entry_tail(),                   // context_type_entry_tail: COMMA context_type_entry context_type_entry_tail
    134 => reduce_actions.action_function_type_parameters_empty(),            // function_type_parameters: GT
    135 => reduce_actions.action_type_name(),                                 // $@13: %empty
    136 => reduce_actions.action_function_type_parameters_tail(),             // function_type_parameters: $@13 type function_type_parameters_tail
    138 => reduce_actions.action_type_name(),                                 // $@14: %empty
    139 => reduce_actions.action_function_type_parameters_tail(),             // function_type_parameters_tail: COMMA $@14 type function_type_parameters_tail
    140 => reduce_actions.action_iteration_contexts_tail(),                   // iteration_contexts: iteration_context COMMA iteration_contexts
    141 => reduce_actions.action_iteration_contexts_tail(),                   // iteration_contexts: iteration_context
    142 => reduce_actions.action_iteration_context_variable_name_begin(),     // $@15: %empty
    143 => reduce_actions.action_iteration_context_variable_name(),           // $@16: %empty
    145 => reduce_actions.action_iteration_context_value_single(),            // iteration_context_value: expression
    146 => reduce_actions.action_iteration_context_value_range(),             // iteration_context_value: expression ELLIPSIS expression
    147 => reduce_actions.action_quantified_expressions_tail(),               // quantified_expressions: quantified_expression COMMA quantified_expressions
    148 => reduce_actions.action_quantified_expressions_tail(),               // quantified_expressions: quantified_expression
    149 => reduce_actions.action_quantified_expression_variable_name_begin(), // $@17: %empty
    150 => reduce_actions.action_quantified_expression_variable_name(),       // $@18: %empty
    151 => reduce_actions.action_quantified_expression(),                     // quantified_expression: $@17 NAME $@18 IN expression
    152 => reduce_actions.action_formal_parameters_begin(),                   // $@19: %empty
    153 => reduce_actions.action_function_definition(),                       // function_definition: FUNCTION LEFT_PAREN $@19 formal_parameters external
    154 => reduce_actions.action_formal_parameters_empty(),                   // formal_parameters: RIGHT_PAREN
    155 => reduce_actions.action_formal_parameters_first(),                   // $@20: %empty
    158 => reduce_actions.action_formal_parameters_tail(),                    // $@21: %empty
    160 => reduce_actions.action_type_name(),                                 // $@22: %empty
    161 => reduce_actions.action_formal_parameter_with_type(),                // formal_parameter: NAME COLON $@22 type
    162 => reduce_actions.action_formal_parameter_without_type(),             // formal_parameter: NAME
    163 => reduce_actions.action_function_body_external(),                    // external: EXTERNAL expression
    164 => reduce_actions.action_function_body(),                             // external: expression
    165 => reduce_actions.action_range_literal(),                             // range_literal: range_literal_start range_literal_end
    166 => reduce_actions.action_range_literal_start(),                       // range_literal_start: LEFT_PAREN range_endpoint ELLIPSIS
    167 => reduce_actions.action_range_literal_start(),                       // range_literal_start: RIGHT_BRACKET range_endpoint ELLIPSIS
    168 => reduce_actions.action_range_literal_start(),                       // range_literal_start: LEFT_BRACKET range_endpoint ELLIPSIS
    169 => reduce_actions.action_range_literal_end(),                         // range_literal_end: range_endpoint RIGHT_PAREN
    170 => reduce_actions.action_range_literal_end(),                         // range_literal_end: range_endpoint LEFT_BRACKET
    171 => reduce_actions.action_range_literal_end(),                         // range_literal_end: range_endpoint RIGHT_BRACKET
    172 => reduce_actions.action_literal_numeric(),                           // range_endpoint: NUMERIC
    173 => reduce_actions.action_literal_string(),                            // range_endpoint: STRING
    174 => reduce_actions.action_literal_date_time(),                         // $@23: %empty
    _ => Ok(()),
  }
}
